<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>码里奥</title>
  
  <subtitle>coderxm</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.maliaoblog.cn/"/>
  <updated>2020-05-31T02:45:02.816Z</updated>
  <id>https://www.maliaoblog.cn/</id>
  
  <author>
    <name>码里奥</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>带你跑一个开源项目</title>
    <link href="https://www.maliaoblog.cn/2020/0531/"/>
    <id>https://www.maliaoblog.cn/2020/0531/</id>
    <published>2020-05-31T02:34:07.000Z</published>
    <updated>2020-05-31T02:45:02.816Z</updated>
    
    <content type="html"><![CDATA[<h3 id="带你跑ELADMIN后台管理系统开源项目"><a href="#带你跑ELADMIN后台管理系统开源项目" class="headerlink" title="带你跑ELADMIN后台管理系统开源项目"></a>带你跑ELADMIN后台管理系统开源项目</h3><hr><h5 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h5><p>最近开始稍微接触了点框架，本来是想学点开源项目什么的，但学起来耗得时间长，所以公众号和博客的文章都慢慢的停更了许久。之前的java多线程和反射都还没弄透，更别说java源码和JVM了，学习这件事真的需要坚持、耐心和不断总结 。github上满是开源项目，建议找一个适合的项目练练，看看它用到的技术，一个个吃透了，以后用到相同的技术就越发熟练，看代码如同行云流水，毫不费劲。今天就推荐一个十分火爆的开源项目el-admin后台管理系统，结合前端Vue使用 ，是一个不错的开胃菜。</p><hr><h5 id="项目简介："><a href="#项目简介：" class="headerlink" title="项目简介："></a>项目简介：</h5><p>一个基于 Spring Boot 2.1.0 、 Spring Boot Jpa、 JWT、Spring Security、Redis、Vue的前后端分离的后台管理系统</p><p>开发文档： <a href="https://docs.auauz.net/" target="_blank" rel="noopener">https://docs.auauz.net/</a><br>体验地址： <a href="https://auauz.net/" target="_blank" rel="noopener">https://auauz.net/</a></p><p>账号密码： <code>admin/123456</code> (默认密码都是123456)</p><table><thead><tr><th></th><th align="center">后端源码</th><th align="center">前端源码</th></tr></thead><tbody><tr><td>github</td><td align="center"><a href="https://github.com/elunez/eladmin" target="_blank" rel="noopener">https://github.com/elunez/eladmin</a></td><td align="center"><a href="https://github.com/elunez/eladmin-web" target="_blank" rel="noopener">https://github.com/elunez/eladmin-web</a></td></tr><tr><td>码云</td><td align="center"><a href="https://gitee.com/elunez/eladmin" target="_blank" rel="noopener">https://gitee.com/elunez/eladmin</a></td><td align="center"><a href="https://gitee.com/elunez/eladmin-web" target="_blank" rel="noopener">https://gitee.com/elunez/eladmin-web</a></td></tr></tbody></table><p>这是用流行框架spring boot和vue实现的前后端分离的后台管理系统，不要被前后端分离吓到了，只是前后端的代码放在不同的地方而已，没有什么特别重要的技术难点。</p><hr><h4 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h4><p>上面已经给出了项目的源码，把前后端的源码下下来就行了，之后要准备什么呢？当然是准备跑项目的环境了，可以分为前端和后端的运行环境。在项目里，是需要后端的，所以先配置后端环境。那我们如何知道应该配好怎样的环境呢？看github项目的介绍，README文档里面也有介绍，以后可以直接看README就行了。既然是个Java项目，当然应该有Java的环境啦，这个可以直接用IDEA代替，社区版的也行，项目的文件就用IDEA打开就是了。</p><hr><h5 id="Redis数据库安装配置"><a href="#Redis数据库安装配置" class="headerlink" title="Redis数据库安装配置"></a>Redis数据库安装配置</h5><p>如果没有，可在公众号内回复<strong>redis</strong>获取。下载好后，应首先配置它的环境变量。分别打开redis-servr.exe和redis-cli.exe，如下：</p><p><img src="https://img-blog.csdnimg.cn/20200531093506213.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="redis">)<img src="https://img-blog.csdnimg.cn/20200531093545795.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="redis启动"></p><hr><h5 id="mysql配置"><a href="#mysql配置" class="headerlink" title="mysql配置"></a>mysql配置</h5><p>项目里的eladmin.sql文件为MySQL启动脚本，了解后，并不是双击运行。前提应该有mysql和数据库管理器吧，没有mysql可以在公众号内的软件工具哪里找，应该有，记得配置环境变量。另外管理工具就别用SQL Server了，sqlyog也不错，官网有社区版的，就下的慢，推荐链接：<a href="https://pan.baidu.com/s/1PcVVkucLRf-49lHDPl6syA" target="_blank" rel="noopener">https://pan.baidu.com/s/1PcVVkucLRf-49lHDPl6syA</a> 提取码：w27i 。先建一个项目数据库。</p><p><img src="https://img-blog.csdnimg.cn/2020053110421664.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="创建数据库"></p><p>接着用记事本或其他打开项目sql脚本，全选粘贴在询问一栏，并再次全选右键执行查询或摁F9。</p><p><img src="https://img-blog.csdnimg.cn/20200531093646199.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="sql查询"><br>结果没报错即可，都不要关闭这些。</p><hr><h5 id="后台spring"><a href="#后台spring" class="headerlink" title="后台spring"></a>后台spring</h5><p>如果没有还有spring这个框架，不用太担心，这样大部分是框架依赖，所以交给IDEA去干就行了，前提是别把网断了，需要下依赖包。如何让IDEA自动下呢？在文件那点击setting设置，在Build,Execute那的Maven选项。</p><p><img src="https://img-blog.csdnimg.cn/20200531093753426.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="导入依赖"><strong>自动导入Maven项目</strong></p><p><img src="https://img-blog.csdnimg.cn/20200531093822889.PNG#pic_center" alt="mport-ij"></p><p><img src="https://img-blog.csdnimg.cn/20200531094000871.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="字节码版本"><br>上图把编译器生成的字节码类型改为和jdk相同版本，我这里用jdk11编译，不然会报“不支持java 5版本，请使用6及以上版本”。更具体的操作可以自己搜索解决，比较简单。同样在项目的配置文件pom.xml里，需要添加相应的依赖属性。</p><blockquote><p><properties> //添加下面几个，如果没有就加上去<br>        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;<br>        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;<br>        &lt;java.version&gt;11&lt;/java.version&gt;<br>        &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt; </properties></p></blockquote><p>这时候还不能自动下载依赖包，可以手动刷新或者说重新导入项目，右键项目文件，在maven选项那点reimport就行了。</p><p><img src="https://img-blog.csdnimg.cn/20200531094242220.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="重新导入"><br>耐心等待后，就可以启动后台了，在eladmin-system下找到Apprun的Java文件，运行它。<br><img src="https://img-blog.csdnimg.cn/20200531094302865.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="项目启动文件"><br>结果如下，没报错就行！<br><img src="https://img-blog.csdnimg.cn/20200531094336323.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><hr><h5 id="前端配置"><a href="#前端配置" class="headerlink" title="前端配置"></a>前端配置</h5><p>前端配置比较容易出错，报错了直接在命令行输出一大堆信息，关键是解决起来非常麻烦。配置前端呢主要是为了能让大家在本地就能看到效果，只有后端的项目，再好，没前端相辅相成，项目跑的也没意思！同样的套路，同样的逼数！首先咱们找到前端的文件夹，发现里面是没有前端的依赖的，这个不足为奇。那咱们就需要配置依赖了。主要是node.js , node.js 是一个基于 Chrome V8 引擎的 JavaScirpt 运行环境，可以用于服务端编程。我们把它下载后需要<strong>配置它的环境变量</strong>，目的是为了用他的包管理工具npm(nodejs package management)，那有什么用呢?</p><pre><code>  1  允许用户从NPM服务器下载别人编写的第三方包到本地使用  2  允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用  3  允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用</code></pre><p>在这之前，把文件夹里的package.json包修改一下，找到script那里，添加如下：</p><pre><code>&quot;scripts&quot;: {    //如果没有以下，则添加    &quot;dev&quot;: &quot;vue-cli-service serve&quot;,    &quot;start&quot;: &quot;node index.js&quot;,    &quot;server&quot;: &quot;nodemon index.js --ignore client&quot;,    &quot;build&quot;: &quot;vue-cli-service build&quot;,  },</code></pre><p>我们下翻，还能看到前端的依赖dependencies和环境需要的版本，node在8.9及以上，npm在3.0.0及以上。</p><pre><code>&quot;engines&quot;: {    &quot;node&quot;: &quot;&gt;=8.9&quot;,    &quot;npm&quot;: &quot;&gt;= 3.0.0&quot;  },</code></pre><p>之后说白了，npm就是帮我们把前端需要的依赖给下了，方便生成前端页面。具体的nodejs的下载安装配置，可以搜索相关文章，这里就不多讲了。命令行‘npm -v’查看npm版本，能看到输出，说明配置成功。</p><blockquote><p>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>-g    //设置淘宝镜像，加快下载依赖</p></blockquote><p>cd进入前端文件夹内，输入”npm install”，开始下载依赖，之后文件夹内会多出node_modules文件夹，命令行中不出现报错就行，报错的话可能有几个原因。</p><blockquote><ol><li>网络原因，下载中断了，或下载较慢</li><li>package依赖包没配置好，应先配置好</li><li>版本低，检查一下</li><li>如果不是以上原因，可能是某一个具体因素导致的，就需要仔细查看命令行报错了，很可能是某个依赖没有下好，可以直接进入文件夹查看，如果没有则真的没下好，可以：npm<br>uninstall xxx;再npm install xxx，重新来一遍。</li></ol></blockquote><hr><p>然后一切顺利，”npm run build: prod”；”npm run dev”；前端就跑起来了！结果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200531101424186.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="eladmin"><br>当然我们不只是纯粹为了演示项目，像里面的配置啊什么的，技术还需要我们一步一步吃透。要学会解决问题，学习路上总有风雨，只要努力专研，还是会有所收获的！如果有更多问题就关注公众号吧！加群了解更多！这次就分享到这了。</p><p>最后附上：<br><a href="https://www.maliaoblog.cn">小码blog</a><br><a href="https://www.cnblogs.com/coderma/" target="_blank" rel="noopener">博客园</a><br>微信公众号：小码之光</p><p> <img src="https://img-blog.csdnimg.cn/20200427213721746.jpg#pic_center" alt="小码之光"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;带你跑ELADMIN后台管理系统开源项目&quot;&gt;&lt;a href=&quot;#带你跑ELADMIN后台管理系统开源项目&quot; class=&quot;headerlink&quot; title=&quot;带你跑ELADMIN后台管理系统开源项目&quot;&gt;&lt;/a&gt;带你跑ELADMIN后台管理系统开源项目&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="eladmin" scheme="https://www.maliaoblog.cn/tags/eladmin/"/>
    
      <category term="项目" scheme="https://www.maliaoblog.cn/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>相比c++,java在基础语法上的改变</title>
    <link href="https://www.maliaoblog.cn/2020/0528/"/>
    <id>https://www.maliaoblog.cn/2020/0528/</id>
    <published>2020-05-28T02:23:55.000Z</published>
    <updated>2020-05-28T02:32:26.588Z</updated>
    
    <content type="html"><![CDATA[<p>此篇给Java初学者的一点参考，算是入门吧，对有c/c++基础的同学来说，更是帮助他们尽快理解Java更深层次(面向对象，集合，泛型，多线程与并发)的强力剂，如有缺漏敬请补正！转载需注明出处！</p><h5 id="文章目录："><a href="#文章目录：" class="headerlink" title="文章目录："></a>文章目录：</h5><ol><li>运行机制</li><li>基本数据与特殊类型</li><li>字符集与数值表达</li><li>文档注释</li><li>连字符+与输出</li><li>switch语句</li><li>foreach循环</li><li>数组类型</li></ol><hr><h4 id="01-Java运行机制"><a href="#01-Java运行机制" class="headerlink" title="01 Java运行机制"></a>01 Java运行机制</h4><p>在运行机制上，Java不同于任何一门语言，Java编写好的源代码文件并不是经过编译后就能立马执行的。不像c/c++一样，编译后就是.exe了，双击就可以运行，但是Java有它巧妙的地方。先说明一下，任何的编程语言的源码都需要经过编译变成二进制代码，才能被执行，无论c/c++还是Java。在Windows上把c/c++源码经过gCC/g++编译后能运行，但在Linux或其他平台，要有相应的源码编译器为源码进行编译，也就是说，想要在其他平台上运行，得把c/c++源码在编译一遍才能运行。看起来也还行的样子，不就是在编译一次嘛！有多大麻烦呢？对程序员来说不算是什么难事，但对用户来说就是难事，或者说，用起来就是个麻烦事。谁还会辛辛苦苦又编译一次源码，然后让它在机子上跑，万一出问题还得重来！</p><p>起初Java就是为解决这个问题而设计出来的，最早是被sun公司用于嵌入式的设备开发，理念是“write once,run anywhere!”，设计出来后并不很火，那时候c++本身就可以跨平台，所以也没Java什么事儿了。但是之后发现真的可以做到 “  run anywhere ” , 并且由于网页端互联网浪潮的掀起，Java在web上大显身手，这才有了今天的Java，然而sun公司在09年被Oracle收购，之后江湖上再也没了sun公司的身影。那Java又是怎么解决跨平台的问题呢?</p><p>先要了解Java文件，源码文件以.java为后缀，经过编译后不直接生成可执行文件，而是生成.class字节码文件(16进制)，这个文件不是让平台的操作系统读的，是让JVM (java virtual machine)java虚拟机读的，平台上的虚拟机识别后会相应生成能让机子跑起来的二进制文件，就能执行了。其中的原理比较复杂，就不过多陈述啦！</p><p>那有人就不快乐啦：就这？</p><p>当然不是，继续讲。想简单跑一个”hello 妹纸！”需要咋做啊？</p><p>首先上[Oracle的官网]，下载jdk1.8版本，就是常说的Java8。jdk(java development kits大概就这样)，顾名思义：Java开发包，有SE(standard     environment)   ,  EE (enterprise environment),ME(micro environment),即标准版，企业版，微型版。我们要学的是SE，到了工作岗位，可能就要EE了，ME现在基本少的接触，就不用学了，毕竟jdk都14了！里面大致分为javac编译器，运行器java.exe，JRE(java runtime environment) java 运行环境，java基础类库，和其他支持。其中JRE里面有JVM(负责解释字节码)，和其他环境支持。如果在windows上编译”coder小 码.java “源文件，就变成”coder小码.class”,想要在另一台装linux的机子上运行，只需要在这台机子上装JRE就行了，JVM解释”coder小码.class”文件后执行它就行了。</p><hr><h4 id="02-基本与特殊数据类型"><a href="#02-基本与特殊数据类型" class="headerlink" title="02 基本与特殊数据类型"></a>02 基本与特殊数据类型</h4><p>Java相较于原始的c语言，多出了两个基本数据类型，byte字节(1个字节)，和boolean布尔(true/false)基本类型,总共8种；其他为引用(reference)类型，多出了String字符串类型，Array数组类型，null类型(唯一值null)，等等。原来的char字符类型变成了两个字节，可以支持中文字符，一个char,一个汉字。</p><p>保留字(目前未使用但以后会使用):const ; goto也是关键字。</p><p>直接量：true,false,null.虽然不是关键字，但依然不能用来做标识符。</p><p>标识符：增加了$标识开头(中英字母，下划线)，同样不能数字打头，其后才能接任意字符，中日英皆可。</p><hr><h4 id="03-字符集与数值表达"><a href="#03-字符集与数值表达" class="headerlink" title="03 字符集与数值表达"></a>03 字符集与数值表达</h4><p>上面大家可能就有点疑问了，咋就这么越来越开放了！中日字符都来了！没错，Java换了字符支持，使用unicode字符集，几乎支持所有字符，改变了以往编程语言只支持英文标识符的情况，现在读取一个char就相当于读取了一个汉字了。unicode就是这么杠！</p><p>数值表达：Java在整数上又动手动脚的，增加了对二进制整数的表达，比如。</p><pre><code>int binary = 0b10000001;</code></pre><p>上面为一个负数，需要换算成原码为-128。另外为防止程序员出意外看走眼，还可以写成：</p><pre><code>int binary  = 0b1000_0001;</code></pre><p>用下划线可以分隔整型和浮点型。</p><hr><h4 id="04-文档注释"><a href="#04-文档注释" class="headerlink" title="04 文档注释"></a>04 文档注释</h4><p>注释除了以前常用的单多行注释，Java还增加了文档注释。Java为开发者提供了大量的基础类，同时也提供了<a href="https://www.oracle.com/technetwork/java/javase/downoads/" target="_blank" rel="noopener">API帮助文档</a>，介绍各个API、方法、包、类的使用方法，原型。如果编写很大的Java程序，可以利用javadoc工具将源码的文档注释提取出来变成API文档，例：</p><pre><code>/**两个**Description*&lt;h1&gt;javadoc&lt;/h1&gt;*Copyright 2009*@author coder小码*@version 1.0*/</code></pre><p>可以在类，方法，public\protected变量前加注释。进入目录，终端输入：</p><pre><code>javadoc -d D://coder/ -windowtitle API文档 -author -version *.java</code></pre><p>上面的命令用于生成Java文档，-d 存放目录 ，-windowtitle 窗口标题，-author -version,加上作者和版本信息，从当前目录下所有Java源文件中提取注释。之后就生成了和官方一样专业的API文档了！</p><hr><h4 id="05-连字符‘-’与输出"><a href="#05-连字符‘-’与输出" class="headerlink" title="05 连字符‘+’与输出"></a>05 连字符‘+’与输出</h4><p>和c++一样，Java也有连字符，可以将字符串拼接到一起，但同时又能做算术运算，这就涉及到了运算符的重载和基本数据类型的装拆箱了。</p><pre><code>String coder = &quot;小码&quot;+&quot;coder&quot;;String coder2 = &quot;coder小码&quot;+321；System.out.println(coder);System.out.println(coder2);</code></pre><p>输出为：“小码coder”,“coder小码321”。</p><p>将+看作是一个方法，既可以把数字作为参数，又可以把字符做参数，而方法名却没有变，算是隐式的重载一个“+”方法。</p><h5 id="输入输出："><a href="#输入输出：" class="headerlink" title="输入输出："></a>输入输出：</h5><p>Java里主要有3种输出方式，或者说方法吧！上面的算一种：println(变量),即直接输出变量值，还带换行！第二种：printf(“%s”,string),这种再熟悉不过了，需要搭配格式符输出；第三种：print(变量)，同样直接输出值，只不过不带换行！以上都在lang包的System类下的out方法，返回PrintStream输出流类下的println()方法。</p><hr><h4 id="06-switch语句"><a href="#06-switch语句" class="headerlink" title="06 switch语句"></a>06 switch语句</h4><p>Java7增强了switch语句,原来从switch(expression)，表达式只能是byte , short , int , char四种，后来增加了枚举类型enum和String类型，但是不能为true/false布尔型 。相比c/c++的switch语句，多了byte,char(可以是单个中文字符)。需要注意的是：可以是String类型，而不是StringBuffer或StringBuilder字符串类型，即使都是字符串类型。</p><pre><code>String coder = &quot;coder小码&quot;;switch (coder){    case &quot;点赞&quot;:        System.out.println(coder);        break;    case &quot;收藏&quot;:        System.out.println(coder);        break;    case &quot;coder小码&quot;:        System.out.println(coder);        break;    default:        System.out.println(coder);}</code></pre><hr><h4 id="07-foreach循环"><a href="#07-foreach循环" class="headerlink" title="07 foreach循环"></a>07 foreach循环</h4><p>foreach循环是从Java5之后开始加入的，python语法里也有foreach循环，使用它进行遍历操作非常方便。那方便在哪呢？</p><ul><li>无需获得要遍历对象的长度，即不需要知道数组或集合多大</li><li>无需根据索引(下标)访问数组或集合(collection)的元素</li></ul><p>foreach语法如下：</p><pre><code>for(元素类型 循环变量: 数组或集合){    //要执行的代码块    System.out.println(循环变量);}</code></pre><p>从上面看出，foreach的循环将数组或集合中的元素临时赋值给了循环变量，后逐个输出，并没有改变数组的元素，即foreach虽好，但不能改变数组或集合的内容 或值。如果在循环内给循环变量进行赋值，同样不能改变其内容，反而将想要获得的数组的元素修改替换了。</p><hr><h4 id="08-数组类型"><a href="#08-数组类型" class="headerlink" title="08  数组类型"></a>08  数组类型</h4><p>在Java里数组类型有很大变化，以前在c/c++里，数组名就相当于一个指针，指向数组内存首地址。在Java中不是没有指针，只是指针这种概念被弱化了，很少提到，反而多出了引用这种类型，而数组就属于引用类型。</p><h5 id="数组的定义有两种方式："><a href="#数组的定义有两种方式：" class="headerlink" title="数组的定义有两种方式："></a>数组的定义有两种方式：</h5><pre><code>int[] coder;或int coder[];</code></pre><p>很明显，在引入引用的概念并支持unicode字符集后，选择第一种方式才符合Java的语法，不是说第二种就错了，而是第二种可读性太差，很容易看成是定义了一个int类型的以“coder[]”为变量名的数据，而第一种方式，int[]本身就是一种引用类型，而coder就是一个妥妥的引用变量。</p><h5 id="数组的初始化的3种方式："><a href="#数组的初始化的3种方式：" class="headerlink" title="数组的初始化的3种方式："></a>数组的初始化的3种方式：</h5><pre><code>第一种：coder = new int[] {3,2,1};第二种：coder = new int[3];第三种：int[] coder = {3,2,1};</code></pre><p>经典又常用的三种初始化方式，先说前两种吧。前两种都是在已经定义了数组的情况下进行初始化的，我们将第一种称做静态初始化，即初始化的时候就把元素值填了进去，这个时候数组就定了，长度不再改变。而第二种则可以称动态初始化，只是初始化他的长度，并没有赋值。第三种是第一种的简化，即把数组定义和静态初始化两步合一步。以上就是数组的诞生过程，可能有小伙伴会发牢骚：弄一个数组都这么麻烦，还没c/c++效率高呢！的确，c/c++是效率高，但上面之所以要带一个关键字new，其实是为了给数组分配一个内存并初始化赋值，尽管定义了一个数组变量，但只是引用变量而已，没有真正的存数据的内存，起到的也只是一个指向内存的作用，真正有内存是new一个给它。</p><hr><p>最后附上：<br><a href="https://GitHub.com/coderxm/" target="_blank" rel="noopener">github</a><br><a href="https://www.cnblogs.com/coderma" target="_blank" rel="noopener">博客园</a><br>微信公众号：小码之光</p><p> <img src="https://img-blog.csdnimg.cn/20200427213721746.jpg#pic_center" alt="小码之光"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此篇给Java初学者的一点参考，算是入门吧，对有c/c++基础的同学来说，更是帮助他们尽快理解Java更深层次(面向对象，集合，泛型，多线程与并发)的强力剂，如有缺漏敬请补正！转载需注明出处！&lt;/p&gt;
&lt;h5 id=&quot;文章目录：&quot;&gt;&lt;a href=&quot;#文章目录：&quot; clas
      
    
    </summary>
    
    
    
      <category term="java" scheme="https://www.maliaoblog.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>SQL server连接本地数据库的两个问题</title>
    <link href="https://www.maliaoblog.cn/2020/0523/"/>
    <id>https://www.maliaoblog.cn/2020/0523/</id>
    <published>2020-05-22T21:46:14.000Z</published>
    <updated>2020-05-22T21:59:13.390Z</updated>
    
    <content type="html"><![CDATA[<h4 id="SQL-Server连接本地数据库时的异常"><a href="#SQL-Server连接本地数据库时的异常" class="headerlink" title="SQL Server连接本地数据库时的异常"></a>SQL Server连接本地数据库时的异常</h4><p> 作者：coder小码</p><hr><p>最近想学点SQL server,几个月前下过，可中间电脑换过机名，重装过系统(电脑不是键盘一下没反应就是鼠标没反应)，充分暴露出windows的不稳定。这告诉我们：要早点和windows离婚吧，换一个漂亮又好用点的linux系统(关键是免费开源)，如果有钱可以跟风mac。哈哈！所以呢，系统里的环境变量全部没了，除了操作系统本身的变量外。经验告诉我们：换系统就是换血，把C盘的除系统外的渣渣都清除了，还好是其他盘的东西还在，不过又得手动配置她们的变量了。。。</p><hr><h5 id="01-SQL-SERVER初探"><a href="#01-SQL-SERVER初探" class="headerlink" title="01 SQL SERVER初探"></a>01 SQL SERVER初探</h5><p>初入SQL SERVER的可能不知道有两种版本分类的SQL SERVER，那现在就普及一下。第一种是MSSQL SERVER,全称是Microsoft SQL Sever，开发版，目前的大型网站一般使用Oracle或者MSSQL，JSP.PHP.ASP都可以。一般是企业级的商务网站使用的。全功能SQL数据库服务器，从2017版开始，横跨任何平台，完全免费。第二种是Express ，商业免费，有对应的限制一般都用这个。是SQL SERVER的简洁版，可以这样说。</p><p> 但开始我也不懂啊，也没人叫我怎么玩哈，所以最近发现SQL不见了，就急忙下个SQL server2019最新版的玩一下。不行的是下载了6个多G，连带管理工具一起下(都是开热点的流量啊！啊啊！)，N久后，才下完！然后安装！！！N久。</p><p>起初是发现从前的2017版的没有了，主要是SSMS没有，SSMS是SQL SERVER Management Studio,SQL SERVER管理工具，用来管理数据库的，而我们下的是SQL SERVER的一个下载工具罢了。没SSMS还是玩不起来。</p><hr><h5 id="02-第一个问题：配置管理器无法连接到-WMI-提供程序"><a href="#02-第一个问题：配置管理器无法连接到-WMI-提供程序" class="headerlink" title="02  第一个问题：配置管理器无法连接到 WMI 提供程序"></a>02  第一个问题：配置管理器无法连接到 WMI 提供程序</h5><p> 这个<strong>问题</strong>我记住你了，化成灰我都认得你！！</p><p> <img src="https://img-blog.csdnimg.cn/20200521170345860.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="配置管理器异常">弄了我一整晚，网上都查遍了，每个有效的方法。现在给大家清楚讲一遍，按上面的说，WMI,（Windows Management Instrumentation 即windows 管理规范）是一项核<br>心的 Windows 管理技术；<strong>用户可以使用 WMI 管理本地和远程计算机</strong>。简单点，就是管本地和远程计算机的一个东西。有点内味了！！也就是说要这个服务来帮助SQL配置管理器管理计算机的，那怎么管呢？</p><p>有两种解决方法：要么是没权限，弄权限；要么是服务器真的不能访问了，解决服务器。很明显，连自己的本地的机子，还说无法访问，那就是没权限啦。查查了半天，说要弄一个NETWORK SERVICE的权限，也弄了没反应，估计还不够吧！之后又有其他办法，说进如：”C:\Program Files (x86)\Microsoft SQL Server”里面，我的是这样的，里面是90‘100’120‘的数字文件夹(跟系统打交道的)，不是真正的SQL SERVER文件夹(有界面的那个)。</p><p>其中有一个shared文件夹里有150\Shared\sqlmgmproviderxpsp2up.mof这个文件。<br><img src="https://img-blog.csdnimg.cn/2020052117542694.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="sql~mof"></p><p>我的是150/，可能不一样。之后在命令行输入：</p><blockquote><p>mofcomp “C:\Program Files(x86)\Microsoft<br>SQLServer\150\Shared\sqlmgmproviderxpsp2up.mof”</p></blockquote><p>结果：<br><img src="https://img-blog.csdnimg.cn/20200521173114764.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="将本地数据放到SQL储存库中"><br>将本地数据放到SQL储存库中了，就表示能访问到。那mof是个什么东西呢！</p><p><img src="https://img-blog.csdnimg.cn/20200521173617862.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="mof"></p><p> 反正就是微软瞎造的东西，跟配置有关。不管了！可以正常打开配置管理器，但是里面项目为空，啥也看不到呀！正常是这样的：</p><p><img src="https://img-blog.csdnimg.cn/20200521174143779.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="正常"></p><p>但是右边什么也没有，而且，SSMS还是连不上本地的数据库实例。</p><hr><h5 id="第二个问题：系统找不到指定的文件"><a href="#第二个问题：系统找不到指定的文件" class="headerlink" title="第二个问题：系统找不到指定的文件"></a>第二个问题：系统找不到指定的文件</h5><p>GUI是这样的：<br><img src="https://img-blog.csdnimg.cn/20200521174341368.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="系统找不到指定的文件"><br>本来是输入个本机名字就行了，可就是死活连不上。SSMS: 想玩我？没门！这个时候，还是用的2017的SQL配置管理器，2019的SQLEXPRESS，连2019的配置管理器都没有，当然弄不了了。那之前的努力都白搭，花了我N久弄完！</p><p>其实挺简单的，一步解决上面两个问题，还能使用最新的2019SQL SERVER。对啦，就是重新安装，不用开浏览器上什么官网，直接follow me。哈哈！</p><p>找到SQL SERBER的安装目录，就是那个有安装的SQL server2019：</p><hr><p> D盘文件夹：<br> <img src="https://img-blog.csdnimg.cn/20200521180118799.PNG#pic_center" alt="SQL文件"></p><p>sqlserver文件夹里是这样的：</p><p><img src="https://img-blog.csdnimg.cn/20200521181435401.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="新的本地实例MSSQL1.5"></p><p>之后一路默认安装：</p><p><img src="https://img-blog.csdnimg.cn/20200521180336817.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="SQL 安装中心"></p><hr><p>安装期间会同时实例化本地的数据库，以windows管理员的身份管理，完成后就能看到开始菜单里有2019配置管理器了：</p><p><img src="https://img-blog.csdnimg.cn/20200521180652720.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="开始菜单"></p><p>sercice服务里也会有SQL服务，之前是没有的，即使解决了第一个问题后。估计这就是第二个问题没解决的原因吧！没SQL server服务，就没得玩喽！</p><p><img src="https://img-blog.csdnimg.cn/20200521180951615.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="SQLsever服务"></p><hr><p>所以最后献上玩美结果：</p><p><img src="https://img-blog.csdnimg.cn/20200521181319650.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="连上了本地"></p><p>哈哈，如果要用Network service权限解决的话请参考<a href="https://blog.csdn.net/qq_17532383/article/details/45542605?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159005588419724811810680%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=159005588419724811810680&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v25-7-45542605.nonecase&utm_term=sql%E6%97%A0%E6%B3%95WMI" target="_blank" rel="noopener">另一篇</a><br>最后祝大家玩的愉快！！</p><hr><p>最后附上：<a href="https://blog.csdn.net/Gobullin" target="_blank" rel="noopener">小码csdn</a><br><a href="https://www.cnblogs.com/coderma" target="_blank" rel="noopener">博客园</a><br>微信公众号：小码之光</p><p> <img src="https://img-blog.csdnimg.cn/20200427213721746.jpg#pic_center" alt="小码之光"></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;SQL-Server连接本地数据库时的异常&quot;&gt;&lt;a href=&quot;#SQL-Server连接本地数据库时的异常&quot; class=&quot;headerlink&quot; title=&quot;SQL Server连接本地数据库时的异常&quot;&gt;&lt;/a&gt;SQL Server连接本地数据库时的异常&lt;/
      
    
    </summary>
    
    
    
      <category term="SQLserver" scheme="https://www.maliaoblog.cn/tags/SQLserver/"/>
    
  </entry>
  
  <entry>
    <title>小码moneykeeper</title>
    <link href="https://www.maliaoblog.cn/2020/0514/"/>
    <id>https://www.maliaoblog.cn/2020/0514/</id>
    <published>2020-05-13T23:07:24.000Z</published>
    <updated>2020-05-13T23:11:50.738Z</updated>
    
    <content type="html"><![CDATA[<h3 id="纯c小项目，小码资金管理工具moneykeeper"><a href="#纯c小项目，小码资金管理工具moneykeeper" class="headerlink" title="纯c小项目，小码资金管理工具moneykeeper"></a>纯c小项目，小码资金管理工具moneykeeper</h3><p>作者：coderxm<br>公众号：小码之光</p><hr><p> 你小码哥回来啦！最近闷得慌，又在学java(自学，想走这条路，哎，一个人找到所爱的真的很难,说不定哪天真的挂了，就来不及了)，慢慢地觉得特别吃力了，主要是学习环境不好，住在一个‘破房子’里，人口又多，真的是烦，而且还不是自个家（没家）。有意识地数了数钱口袋，发现是真的穷死光，哎！！！郁闷啊啊啊！感觉连自个亲人都被抛弃地感觉！(<strong>除了自己，谁都别信！</strong>因为别指望他们能帮你买房买车，理解你的世界！) 总想做点什么，于是敲了敲几行代码，做了个小钱钱管理工具，以后方便看看钱兜(哎！)，自己觉得挺简单实用地就分享给大家了，源码也给哈！<br>下载地址        :    <a href="https://github.com/coderxm/moneykeeper.git" target="_blank" rel="noopener">小码理财moneykeeper</a></p><hr><h6 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h6><pre><code>#include&lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;windows.h&gt;#include&lt;conio.h&gt;// 户名结构体 typedef struct{    char hum[100];//    char money[10];}hums;// 构造函数void outdata(void); void empty(char *sf);void putdata(hums *hm);void qorw(hums *hm);int strint(char *s);int main(void){    hums zhanghu[11];    //定义户名结构体数组     char get[4];     char command[4];    FILE *fpr;    fpr = fopen(&quot;E:\\wokfilc\\moneykeeper\\data.txt&quot;,&quot;r&quot;);    fgets(get,5,fpr);    fclose(fpr);    if(get==&#39;\0&#39;||get==&quot; &quot;){        printf(&quot;无账户信息!&quot;);        qorw(zhanghu);    }else{        outdata();        printf(&quot;请继续写入wd或退出quit：\n&quot;);        scanf(&quot;%s&quot;,command);        if(strcmp(command,&quot;quit&quot;)==0){            exit(0);        }else if(strcmp(command,&quot;wd&quot;)==0){            putdata(zhanghu);            outdata();            qorw(zhanghu);        }else{            printf(&quot;输入错误，请重新输入：\n&quot;);            qorw(zhanghu);        }    }    return 0;} //输出信息 void outdata(){    FILE *fpr;    fpr = fopen(&quot;E:\\wokfilc\\moneykeeper\\data.txt&quot;,&quot;r&quot;);    int sum=0;    char DataStr[100];    printf(&quot;*****$$*****\n正在输出账户信息：\n&quot;);    while(feof(fpr)==0){        fseek(fpr,0L,SEEK_CUR);                //?        fgets(DataStr,100,fpr);        if(DataStr!=&#39;\0&#39;&amp;&amp;DataStr!=&quot; &quot;){            printf(&quot;%s \n&quot;,DataStr);        }                sum = sum+strint(DataStr);        empty(DataStr);    }     fclose(fpr);    printf(&quot;您的总资金合计为：%d元\n&quot;,sum);}//empty初始化清空数组 void empty(char *sf){    int sfsize = 0;    sfsize = sizeof(sf);     for(int n=0;n&lt;sfsize;n++){        sf[n] = &#39;\0&#39;;     }} //写入数据 void putdata(hums *hm){    FILE *fpw;    fpw = fopen(&quot;E:\\wokfilc\\moneykeeper\\data.txt&quot;,&quot;w+&quot;);    int i = 0;    char input[100];    printf(&quot;(回车)请写入账户数据：\n&quot;);    do{        int len = 0;        empty(input);         printf(&quot;请写入第%d个账户数据:\n&quot;,i+1);        scanf(&quot;%s&quot;,input);            len = strlen(input);        strcpy(hm[i].hum,input);         strcat(hm[i].hum,&quot;\n&quot;);        fputs(hm[i].hum,fpw);        i = i+1;    }while( (strcmp(input,&quot;end&quot;))!=0&amp;&amp;(i&lt;11) );    fclose(fpw);    //写入完毕后关闭文件 }//字符串中提取数字 int strint(char *s){    int slen=0;    int Money=0;    int ml = 0;    char money[10];    slen = strlen(s);    for(int n=0;n&lt;slen;n++){        if(s[n]&gt;=48&amp;&amp;s[n]&lt;=57){            money[ml]=s[n];            ml++;        }    }    Money = atoi(money);    return Money;}//选择（退出或重新写入）函数void qorw(hums *hm){    char getput[10];    printf(&quot;请选择(重新)输入wrdo或退出quit：\n&quot;);    scanf(&quot;%s&quot;,getput);    while(strcmp(getput,&quot;quit&quot;)!=0){        if(strcmp(getput,&quot;quit&quot;)==0){            return;        }else if(strcmp(getput,&quot;wrdo&quot;)==0){            putdata(hm);            qorw(hm);            return;        }else{            printf(&quot;重新输入,&quot;);            qorw(hm);            return;        }    }} </code></pre><hr><p>源码讲解就不用了吧！相信坚定走这路的人学过c，能看懂吧！主要是也让大家有个真实的现实观，好好管管小钱钱，别胡乱挥霍，以后说不定有大用处！至少能给你一个<strong>真正的家</strong>(一个固定的住处)！好啦！拜拜，学习去喽！</p><hr><p>最后：<br>个人站点：<a href="https://www.cnblogs.com/coderma" target="_blank" rel="noopener">博客园</a><br>公众号：<br><img src="https://img-blog.csdnimg.cn/20200513202720997.jpg#pic_center" alt="小码之光"></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;纯c小项目，小码资金管理工具moneykeeper&quot;&gt;&lt;a href=&quot;#纯c小项目，小码资金管理工具moneykeeper&quot; class=&quot;headerlink&quot; title=&quot;纯c小项目，小码资金管理工具moneykeeper&quot;&gt;&lt;/a&gt;纯c小项目，小码资金管
      
    
    </summary>
    
    
    
      <category term="moneykeeper" scheme="https://www.maliaoblog.cn/tags/moneykeeper/"/>
    
  </entry>
  
  <entry>
    <title>疫情之下c又崛起！</title>
    <link href="https://www.maliaoblog.cn/2020/0510/"/>
    <id>https://www.maliaoblog.cn/2020/0510/</id>
    <published>2020-05-09T23:26:56.000Z</published>
    <updated>2020-05-09T23:38:36.119Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>已经5月份了，国内的疫情也渐渐的好转，人们也把目光放在了经济发展和工作上，拿着漫长的疫情期间，编程界有什么波动呢？</p></blockquote><p>据tiobe官网5月份最新数据显示，C语言在疫情结束后悄悄地登上排行第一位，这是继2015java霸着冠军宝座以来，c语言重新闪耀它的魅力。来看看数据：</p><p><img src="https://img-blog.csdnimg.cn/20200510071549355.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="5月排行"></p><p>从上面看出，c已经超过java1%，相差并不大，也就是说，java仍有其可用之处，短期内并不会被时代抛弃。同时也不意味着c能继续禅位。其中可以看到，以大数据、嵌入式为方向的语言如python、R有了明显的排名提升，这说明，在未来大数据、云计算及嵌入式的科技发展将占据一定的主导地位，并且将应用到人工智能领域，推动人工智能的进一步发展。</p><hr><p><strong>再来看看官网的解读</strong>：</p><p>Java和C在4月已经非常接近，但是本月C再次超越Java。C上一次成为第一名是在2015年。我们只能猜测C为什么再次成为第一名。原因之一可能是冠状病毒。这听起来很愚蠢，但是某些编程语言确实可以从这种情况中受益。例子是数据科学领域的Python和R，因为每个人都在寻找该病毒的解毒剂。但是嵌入式软件语言（例如C和C ++）也越来越流行，因为它们被用于医疗设备的软件中。另一方面，值得一提的是，Rust实际上已经接近前20名（一个月内从第27位上升到第21位）。Paul Jansen(保罗·詹森) TIOBE Software首席执行官 TIOBE编程社区索引是编程语言受欢迎程度的指标。索引每月更新一次。评级基于全球熟练的工程师，课程和第三方供应商的数量。<br><img src="https://img-blog.csdnimg.cn/20200510071720384.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="趋势"><br>诸如Google，Bing，Yahoo！，Wikipedia，Amazon，YouTube和Baidu等流行的搜索引擎用于计算评分。</p><blockquote><p> 重要的是要注意，TIOBE索引与最佳编程语言或大多数代码行所用的语言无关。该索引可用于检查您的编程技能是否仍然是最新的，或用于在开始构建新软件系统时就应采用哪种编程语言做出战略决策。TIOBE索引的定义可以在这里找到。</p></blockquote><p>看来官网已经为我们解释的非常好了，只不过有些话很罗嗦。我就不再跟着啰嗦一遍了，总之，c从疫情中发挥了很大的作用，这足以让看不上c的人开开眼。c还是很有作为的！只不过之前没发现而已。大家又在使用或学习哪种语言呢？</p><hr><p>最后：<br><a href="https://blog.csdn.net/Gobullin" target="_blank" rel="noopener">博客CSDN</a>：coder小码<br>公众号‘<strong>小码之光</strong>’：<br><img src="https://img-blog.csdnimg.cn/20200510071951248.jpg#pic_center" alt="小码之光"></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;已经5月份了，国内的疫情也渐渐的好转，人们也把目光放在了经济发展和工作上，拿着漫长的疫情期间，编程界有什么波动呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;据tiobe官网5月份最新数据显示，C语言在疫情结束后悄悄地登上排行第一位，这是继2015
      
    
    </summary>
    
    
    
      <category term="c" scheme="https://www.maliaoblog.cn/tags/c/"/>
    
      <category term="疫情" scheme="https://www.maliaoblog.cn/tags/%E7%96%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>java equals()函数与‘==&#39;</title>
    <link href="https://www.maliaoblog.cn/2020/0509/"/>
    <id>https://www.maliaoblog.cn/2020/0509/</id>
    <published>2020-05-08T23:26:20.000Z</published>
    <updated>2020-05-09T23:39:15.034Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java-equals-函数与‘-’"><a href="#java-equals-函数与‘-’" class="headerlink" title="java equals()函数与‘==’"></a>java equals()函数与‘==’</h3><hr><blockquote><p>谈到java的字符串比较函数equals(),就不得不说它真真的用途啦！虽然只是java里面一个简单的知识点，还是有必要扯扯它，因为有许多学习java的小伙伴在比较字符串上纠结与equals()和‘==’的选择。</p></blockquote><hr><h4 id="equals-函数"><a href="#equals-函数" class="headerlink" title="equals()函数"></a>equals()函数</h4><p>函数原型：</p><blockquote><p>public boolean equals(Object anObject)</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200509203330784.PNG#pic_center" alt="equals()"></p><p>函数用来比较<strong>字符串内容</strong>的相等，可以是字符串的变量String a = “coder小码”,字符串对象String a = new String(“coder小码”)之间或和同类型的字符串比较，只要是String就行。返回值是布尔值，true \ false,与类型是String或String对象没有关系，只要字符串内容一致，就返回true,否则false。</p><h6 id="字符对象比较"><a href="#字符对象比较" class="headerlink" title="字符对象比较"></a>字符对象比较</h6><p><img src="https://img-blog.csdnimg.cn/20200509204232153.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="字符对象的比较"></p><h6 id="字符对象与字符String比较"><a href="#字符对象与字符String比较" class="headerlink" title="字符对象与字符String比较"></a>字符对象与字符String比较</h6><p><img src="https://img-blog.csdnimg.cn/20200509204448284.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="字符对象与字符String比较"></p><h6 id="字符String之间比较"><a href="#字符String之间比较" class="headerlink" title="字符String之间比较"></a>字符String之间比较</h6><p><img src="https://img-blog.csdnimg.cn/20200509204724918.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="字符String之间比较"></p><hr><h4 id="‘-’关系运算符的运用"><a href="#‘-’关系运算符的运用" class="headerlink" title="‘==’关系运算符的运用"></a>‘==’关系运算符的运用</h4><p>在编写代码的过程中我们经常用到‘==’ 运算符，那 它实质比较的是什么呢？其实也不很高深莫测，实质上是在比较引用指向的内存地址的，只要指向的内存地址相同，即可判断为true。</p><p>说到这里可能会有疑惑了，难道还比内存不成？咋回事啊？咱们先看看几个小例子：</p><h6 id="对象间的比较"><a href="#对象间的比较" class="headerlink" title="对象间的比较"></a>对象间的比较</h6><p><img src="https://img-blog.csdnimg.cn/20200509205936508.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="对象间的比较"></p><h6 id="字符间的比较"><a href="#字符间的比较" class="headerlink" title="字符间的比较"></a>字符间的比较</h6><p><img src="https://img-blog.csdnimg.cn/20200509210051416.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="字符间的比较"></p><h6 id="字符与字符对象的比较"><a href="#字符与字符对象的比较" class="headerlink" title="字符与字符对象的比较"></a>字符与字符对象的比较</h6><p><img src="https://img-blog.csdnimg.cn/20200509210147114.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="字符与字符对象的比较"></p><h6 id="整型间比较"><a href="#整型间比较" class="headerlink" title="整型间比较"></a>整型间比较</h6><p><img src="https://img-blog.csdnimg.cn/20200509210230950.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="整型间比较"></p><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以上代码例子可以说明equals()只是用来比较字符串内容的，不涉及字符串值的地址，而‘==’用法就广泛一点，还能用来比较整形(不止整形和字符)，但实质上是比较是不是来自同一个地址，是就返回true，否则false。好啦，以上就是今天的内容，欢迎在下面留言哦！每一点都是知识的积累，希望学习躺赢，学习愉快！</p><hr><p>最后：<br><a href="https://blog.csdn.net/Gobullin" target="_blank" rel="noopener">博客CSDN</a>：coder小码<br>公众号‘<strong>小码之光</strong>’：<br><img src="https://img-blog.csdnimg.cn/20200509211320148.jpg#pic_center" alt="小码之光"></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;java-equals-函数与‘-’&quot;&gt;&lt;a href=&quot;#java-equals-函数与‘-’&quot; class=&quot;headerlink&quot; title=&quot;java equals()函数与‘==’&quot;&gt;&lt;/a&gt;java equals()函数与‘==’&lt;/h3&gt;&lt;hr&gt;

      
    
    </summary>
    
    
    
      <category term="java" scheme="https://www.maliaoblog.cn/tags/java/"/>
    
      <category term="equals" scheme="https://www.maliaoblog.cn/tags/equals/"/>
    
  </entry>
  
  <entry>
    <title>IDEA启动加速与java编译</title>
    <link href="https://www.maliaoblog.cn/2020/0506/"/>
    <id>https://www.maliaoblog.cn/2020/0506/</id>
    <published>2020-05-06T01:17:56.000Z</published>
    <updated>2020-05-06T01:20:24.316Z</updated>
    
    <content type="html"><![CDATA[<h4 id="IJ-IDEA启动加速与java编译"><a href="#IJ-IDEA启动加速与java编译" class="headerlink" title="IJ IDEA启动加速与java编译"></a>IJ IDEA启动加速与java编译</h4><p>1.<strong>启动加速</strong><br>2.<strong>java编译</strong></p><hr><h5 id="01-启动加速"><a href="#01-启动加速" class="headerlink" title="01 启动加速"></a>01 启动加速</h5><p><img src="https://img-blog.csdnimg.cn/20200504113321417.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="tips"><br>忽然有一天IDEA说：你打开它“有点慢”，然后说：consider reducing the num of folder under antivirus protection. 这很有效！</p><p> 可能用IDEA的伙伴都会遇到这样的问题，这只是一个提示。那他说这很有效，到底个怎么有效呢？<em>consider reducing the num of folder under antivirus protection</em> 意思翻译过来 就是：考虑在病毒防护中排除启动器打开的文件。那具体咋弄？先看看官方解释：<br> <img src="https://img-blog.csdnimg.cn/20200504114120578.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70" alt="jetbrain"><br>再翻译一下：</p><blockquote><p>某些防病毒软件可能会干扰IDE的构建过程，从而导致构建的运行速度大大降低。 在IDE中运行构建时，会在计算机上创建许多类文件。<br>如果您的防病毒软件启用了实时扫描，则防病毒软件可以在每次创建文件时强制停止构建过程，而防病毒软件会扫描该文件。</p><p>如果您使用的是Windows Defender，则IDE会自动检查您是否启用了实时扫描，以及是否将扫描配置为处理IDE写入大量文件的目录。</p><p>IDE提供了一种可能性，可以从自动扫描中排除那些目录（此功能在2019.2+ IDE版本中可用）。</p><p>如果您希望手动执行必要的配置，则可以按照以下步骤进行：</p><pre><code> 点击开始按钮 输入“ Windows安全性” 点击“病毒和威胁防护” 点击“病毒和威胁防护设置”下的“管理设置” 如果需要，请向下滚动，然后单击“添加或删除排除项” 对于通知中显示的每个文件夹，请按+按钮，从菜单中选择“文件夹”，然后选择该文件夹。</code></pre></blockquote><p> 官方都非常详细地解释了一番，打开IDEA慢的原因受到电脑自带的杀毒软件的影响，使IDEA不能构建文件。</p><hr><h5 id="02-java编译"><a href="#02-java编译" class="headerlink" title="02 java编译"></a>02 java编译</h5><p>有些刚玩IDEA的小伙伴在创建java文件后不知如何编译，大家都知道点击RUN编译运行就可以了，但那是编译带运行输出结果，如果是没有主函数main()呢，只是想编译呢？</p><p> 接下来我们介绍三种编译方式：</p><blockquote><p> Compile、Make和Build的区别</p></blockquote><p>针对开发工具，一般都有Compile、Make和Build三个菜单项，完成的功能的都差不多，但是又有区别。编译，是将源代码转换为可执行代码的过程。编译需要指定源文件和编译输出的文件路径（输出目录）。Java的编译会将java编译为class 文件，将非java的文件（一般成为资源文件、比如图片、xml、txt、poperties等文件）原封不动的复制到编译输出目录，并保持源文件夹的目 录层次关系。</p><p>在Java的集成开发环境中，比如Eclipse、IDEA中，有常常有三种与编译相关的选项<strong>Compile、Make、Build</strong>三个选项。这三个选项最基本的功能都是完成编译过程。但又有很大的区别：</p><blockquote><p>1、Compile：只编译选定的目标，不管之前是否已经编译过。</p></blockquote><blockquote><p>2、Make：编译选定的目标，但是Make只编译上次编译变化过的文件，减少重复劳动，节省时间。（具体怎么检查未变化，这个就不用考虑了，IDE自己内部会搞定这些的）</p></blockquote><blockquote><p>3、Build：是对整个工程进行彻底的重新编译，而不管是否已经编译过。Build过程往往会生成发布包，这个具体要看对IDE的配置了，Build在实际中应用很少，因为开发时候基本上不用，发布生产时候一般都用ANT等工具来发布。Build因为要全部编译，还要执行打包等额外工 作，因此时间较长。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200504115100594.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="编译"><br>·</p><hr><p>··················································END························································</p><p>以后编译不用迷迷糊糊的去编译啦！对于IEAD的启动Tips，有些人可能会厌烦，但作为一款风靡全球的智能开发软件，还是对新入门的小鸟有很大帮助的，用习惯了，就想说：“<strong>真香</strong>！”</p><hr><p> 最后写作不易：关注我吧(小码之光)<br><a href="https://www.maliaoblog.cn">博客</a>：<a href="http://www.maliaoblog.cn">www.maliaoblog.cn</a><br><img src="https://img-blog.csdnimg.cn/20200504120421301.jpg#pic_center" alt="小码之光"></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;IJ-IDEA启动加速与java编译&quot;&gt;&lt;a href=&quot;#IJ-IDEA启动加速与java编译&quot; class=&quot;headerlink&quot; title=&quot;IJ IDEA启动加速与java编译&quot;&gt;&lt;/a&gt;IJ IDEA启动加速与java编译&lt;/h4&gt;&lt;p&gt;1.&lt;str
      
    
    </summary>
    
    
    
      <category term="idea" scheme="https://www.maliaoblog.cn/tags/idea/"/>
    
      <category term="java" scheme="https://www.maliaoblog.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>消息轰炸</title>
    <link href="https://www.maliaoblog.cn/2020/0504/"/>
    <id>https://www.maliaoblog.cn/2020/0504/</id>
    <published>2020-05-03T23:38:33.000Z</published>
    <updated>2020-05-03T23:40:08.718Z</updated>
    
    <content type="html"><![CDATA[<h4 id="消息轰炸器-c语言版"><a href="#消息轰炸器-c语言版" class="headerlink" title="消息轰炸器(c语言版)"></a>消息轰炸器(c语言版)</h4><p> C语言学着学着都感觉没啥用，但是事情没有你想的那样枯燥！C还是很有作为的，比如简单的QQ消息轰炸，原理其实很简单！如有需要或了解可关注下面的微信公众号：<strong>小码之光</strong>，回复<strong>消息轰炸</strong>即可获得源码和轰炸器及使用说明。</p><p><img src="https://img-blog.csdnimg.cn/20200503183114618.jpg#pic_center" alt="小码之光"></p><hr><p>话不多说，既然是个成品，就爽快地拿出来：</p><pre><code>#include&lt;stdio.h&gt;#include&lt;windows.h&gt;int main(){    int i;    char name[100];    printf(&quot;目标：&quot;);    scanf_s(&quot;%s&quot;,&amp;name,40);    printf(&quot;次数：&quot;);    scanf_s(&quot;%d&quot;,&amp;i);    HWND H = FindWindow(0,name);    //寻找对话框     while(i--&gt;0){        SendMessage(H,WM_PASTE,0,0);    //粘贴         SendMessage(H,WM_KEYDOWN,VK_RETURN,0);//回车     }} </code></pre><h5 id="原理介绍："><a href="#原理介绍：" class="headerlink" title="原理介绍："></a>原理介绍：</h5><blockquote><p> &lt;windows.h&gt;这个头文件大家很少接触到，里面是一些有关操作系统地接口函数，实际上它是windows的一部分。</p></blockquote><p>scanf_s()函数的用法和scanf()类似，只不过要两个参数，函数原型为</p><pre><code>int scanf_s( const char *format ，[argument]);</code></pre><p>这个函数原型不是太精确，大概来说是这样的，&amp;name为输入需要的储存地址（数组首地址），第二个40为输入大小的限制（40字节）。这个函数是微软之后加上去的，相比scanf()，有输入限制，更安全。</p><p>HWND H是定义了一个句柄，本质上是一个指针，指向窗口。FindWindow()函数用来寻找窗口，所以输入给name数组的为窗口标题。第一个参数是个位常量字符串指针，可以不用管。</p><p>sendmessage()函数很明显用来发消息，发消息第一步肯定是先把消息粘贴，然后enter键发送啦！第一个参数为句柄，第二个为发消息的类型，比如粘贴或按键，后面的参数为具体按键操作。应该能理解。</p><p>i–&gt;0 的意思就是，先判断i是否大于0（大于0，表达式的值为1，否则为0，这个结果将用于while的条件），然后将 i 的值减1。while语句，权如果括号内的值为0，则跳出while循环， 只要括号内的值不为0，则继续循环。 这个大家都学过也能理解。</p><hr><blockquote><p>ok，以上代码就不难弄懂了，好啦，感兴趣的话，可以关注我的公众号进一步了解，希望大家学习c更快乐学习躺赢哦！！哈哈！</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200503192355721.gif#pic_center" alt="学习躺赢"></p><hr><p> 最后：<br>个人博客：<a href="https://www.maliaoblog.cn">https://www.maliaoblog.cn</a><br>公众号：小码之光</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;消息轰炸器-c语言版&quot;&gt;&lt;a href=&quot;#消息轰炸器-c语言版&quot; class=&quot;headerlink&quot; title=&quot;消息轰炸器(c语言版)&quot;&gt;&lt;/a&gt;消息轰炸器(c语言版)&lt;/h4&gt;&lt;p&gt; C语言学着学着都感觉没啥用，但是事情没有你想的那样枯燥！C还是很有作为
      
    
    </summary>
    
    
    
      <category term="c" scheme="https://www.maliaoblog.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++高级编程</title>
    <link href="https://www.maliaoblog.cn/2020/0501/"/>
    <id>https://www.maliaoblog.cn/2020/0501/</id>
    <published>2020-05-01T00:26:55.000Z</published>
    <updated>2020-05-01T00:33:13.548Z</updated>
    
    <content type="html"><![CDATA[<h4 id="c-高级编程介绍"><a href="#c-高级编程介绍" class="headerlink" title="c++高级编程介绍"></a>c++高级编程介绍</h4><p>   学c++确实是件痛苦的事，这水平得一步步抬上去，实话说学校教的也不好，就更痛苦了，还要学这学那，对技术没半点提升。最近就在学这个，没得方向，只好自己归纳了。嘤！嘤！<br>   <img src="https://img-blog.csdnimg.cn/20200429165631459.jpg#pic_center" alt="嘤嘤"></p><hr><h5 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h5><ul><li>预处理</li><li>模板</li><li>命名空间</li><li>文件和流</li><li>动态内存分配</li><li>异常处理</li><li>信号处理</li><li>多线程</li><li>web编程</li></ul><hr><p><img src="https://img-blog.csdnimg.cn/20200429190054196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="知识图"></p><hr><h5 id="01-预处理"><a href="#01-预处理" class="headerlink" title="01 预处理"></a>01 预处理</h5><h6 id="预处理指令"><a href="#预处理指令" class="headerlink" title="预处理指令"></a>预处理指令</h6><p>预处理器是一些指令，指示编译器在实际编译之前所需完成的预处理。所有的预处理器指令都是以井号（#）开头，和C语言一样，也不是c++语句。C++ 还支持很多预处理指令，比如 #include、#define、#if、#else、#line 等。</p><p><strong>define 预处理</strong></p><p>#define 预处理指令用于创建符号常量。该符号常量通常称为宏，指令的一般形式是：</p><pre><code>#define 宏 替代文本 </code></pre><p>这里的宏可以当成常量，书本上一般都大写。但不是非得大写，可以小写，只是在以后的学习上有一个好习惯。其他的宏就不一一介绍了。</p><p><strong>预定义宏</strong></p><p><img src="https://img-blog.csdnimg.cn/20200429170234837.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="预定义宏"></p><p><strong>#运算符</strong></p><p> 和 ## 预处理运算符在 C++ 和 ANSI/ISO C 中都是可用的。# 运算符会把替换文本令牌转换为用引号引起来的字符串。<br> <img src="https://img-blog.csdnimg.cn/20200429170741843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70" alt="#"><br> <strong>条件编译</strong><br> 有几个指令可以用来有选择地对部分程序源代码进行编译。这个过程被称为条件编译。条件预处理器的结构与 if 选择结构很像。<br><img src="https://img-blog.csdnimg.cn/20200429171048730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70" alt="条件编译"></p><hr><h5 id="02-模板"><a href="#02-模板" class="headerlink" title="02 模板"></a>02 模板</h5><p>模板是c++一个很重要的概念，模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。</p><p>上面是c++自己说的，讲的这么高尚，都把自己讲糊涂了！简单去讲，模板可以理解为一种基本模样，可以用来创建函数或者类，或者别的，只是还不到变量的类型。需要注意的是模板可不是类，也就是没有特定的类型啦！</p><p><strong>函数模板</strong></p><p><img src="https://img-blog.csdnimg.cn/20200429172124168.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="函数模板">)图中的T是无特定类型，整个用法有点像函数重载一样，至少重载需要定义不同的同名函数，参数输入也要不一样，有了模板，代码量就减少了，套模板就是。当输入的是整型时，则T为整形进行运算，其余类似。关于刚才的重载和inline内联可参考上次的文章：<a href="https://blog.csdn.net/gobullin/article/details/105798076" target="_blank" rel="noopener">c++面向对象吗？不懂看这个</a></p><p><strong>类模板</strong></p><p>在这里，type 是占位符类型名称，可以在类被实例化的时候进行指定。可以使用一个逗号分隔的列表来定义多个泛型数据类型。<br><img src="https://img-blog.csdnimg.cn/20200429173329417.PNG#pic_center" alt="类模板"></p><p><img src="https://img-blog.csdnimg.cn/20200429173646951.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="类模板"><br>以上就是几个常见的模板，如果真要一个类型去归纳的话，c++给了一个高大上的名字：<strong>泛型</strong>，一个宽泛的类型。。。。</p><hr><h5 id="03-命名空间"><a href="#03-命名空间" class="headerlink" title="03 命名空间"></a>03 命名空间</h5><p>在c++中，一个名为 xyz() 的函数，在另一个可用的库中也存在一个相同的函数 xyz()。这样，编译器就无法判断您所使用的是哪一个 xyz() 函数。因此，引入了命名空间这个概念，它可作为附加信息来区分不同库中相同名称的函数、类、变量等。使用了命名空间即定义了上下文。本质上，命名空间就是定义了一个<strong>范围</strong>。<br><img src="https://img-blog.csdnimg.cn/20200429174417484.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="图解"><br><strong>特定命名</strong>：</p><p><img src="https://img-blog.csdnimg.cn/20200429174452299.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="命名namespace">然而，以上命名空间的函数前，都加了空间名，我们可以用using指令省去，即using namespace 空间名 就可以省去了，例：</p><p>using namespace std;</p><p>cout &lt;&lt; ‘小码之光’ &lt;&lt;endl;<br> 而不是std::cout/endl</p><p><strong>嵌套命名</strong></p><p><img src="https://img-blog.csdnimg.cn/20200429175303338.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="嵌套命名"></p><hr><h5 id="04-文件和流"><a href="#04-文件和流" class="headerlink" title="04 文件和流"></a>04 文件和流</h5><p>C++ 中另一个标准库 fstream，它定义了三个新的数据类型：<br><img src="https://img-blog.csdnimg.cn/20200429175459819.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="文件io"><br>以上三个理解：<br>ofstream:out-file-stream写文件;<br>ifstream:in-file-stream读文件;<br>fstream:file-stream读写;</p><p><img src="https://img-blog.csdnimg.cn/20200429180035780.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="读写模式"><br>在从文件读取信息或者向文件写入信息之前，必须先打开文件。ofstream 和 fstream 对象都可以用来打开文件进行写操作，即需要<strong>先创建文件对象</strong>，如果只需要打开文件进行读操作，则使用 ifstream 对象。和c里的文件读取一样，c++也有打开模式。不过有点不同。</p><p>下面是 open() 函数的标准语法，open() 函数是 fstream、ifstream 和 ofstream 对象的一个成员。</p><p>void open（文件名, ios::打开模式);</p><p><img src="https://img-blog.csdnimg.cn/20200429180141903.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="例"><br>当 C++ 程序终止时，它会自动关闭刷新所有流，释放所有分配的内存，并关闭所有打开的文件。但程序员应该养成一个好习惯，在程序终止前关闭所有打开的文件。</p><p>close() 函数是 fstream、ifstream 和 ofstream 对象的一个成员。</p><hr><h5 id="05-动态内存"><a href="#05-动态内存" class="headerlink" title="05 动态内存"></a>05 动态内存</h5><p><strong>关键字</strong>new\delete<br>堆是程序中未使用的内存，在程序运行时可用于动态分配内存。使用new 运算符为给定类型的变量在运行时分配堆内的内存，这会返回所分配的空间地址。如果您不再需要动态分配的内存空间，可以使用 delete 运算符，删除之前由 new 运算符分配的内存。</p><p><strong>数组</strong><br><img src="https://img-blog.csdnimg.cn/20200429181216147.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="动态分配"><strong>对象</strong></p><p><img src="https://img-blog.csdnimg.cn/20200429181424810.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="对象分配"></p><hr><h5 id="06-异常处理"><a href="#06-异常处理" class="headerlink" title="06 异常处理"></a>06 异常处理</h5><p>异常是程序在执行期间产生的问题。C++ 异常是指在程序运行时发生的特殊情况，比如尝试除以零的操作。</p><p>异常提供了一种转移程序控制权的方式。C++ 异常处理涉及到三个关键字：try、catch、throw。<br>··································································································<br>   throw: 当问题出现时，程序会抛出一个异常。这是通过使用 throw 关键字来完成的。<br>   catch: 在您想要处理问题的地方，通过异常处理程序捕获异常。catch 关键字用于捕    获异常。<br>    try: try 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。<br>····································································································</p><p><img src="https://img-blog.csdnimg.cn/20200429181940957.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="异常处理"><br><img src="https://img-blog.csdnimg.cn/20200429182015771.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="捕获异常"><br>C++ 提供了一系列标准的异常，定义在 <exception> 中，我们可以在程序中使用这些标准的异常。它们是以父子类层次结构组织起来的，如下所示：<br><img src="https://img-blog.csdnimg.cn/20200429182113676.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="异常说明"><br><strong>自定义异常</strong></p><p><img src="https://img-blog.csdnimg.cn/2020042918221952.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="自定义"></p><hr><h5 id="07-信号处理"><a href="#07-信号处理" class="headerlink" title="07 信号处理"></a>07 信号处理</h5><p>信号是由操作系统传给进程的中断，会提早终止一个程序。不是我们一般意义上的信号。这些信号是定义在 C++ 头文件csignal 。</p><p><img src="https://img-blog.csdnimg.cn/20200429182634851.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="信号">C++ 信号处理库csignal提供了 signal 函数，用来捕获突发事件。<br><strong>signal函数</strong></p><p><img src="https://img-blog.csdnimg.cn/20200429182924504.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="signal"><br><strong>raise函数</strong></p><p><img src="https://img-blog.csdnimg.cn/20200429183036845.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="raise"></p><hr><h5 id="08-多线程"><a href="#08-多线程" class="headerlink" title="08 多线程"></a>08 多线程</h5><p>在高级语言编程里，总是会听到多线程，一些大厂面试也会提到多线程，那多线程有多厉害多神秘呢？</p><p>这里又要扯上专业课了，多线程是多任务处理的一种特殊形式，多任务处理允许让电脑同时运行两个或两个以上的程序。一般情况下，两种类型的多任务处理：基于进程和基于线程。</p><pre><code>基于进程的多任务处理是程序的并发执行。基于线程的多任务处理是同一程序的片段的并发执行。</code></pre><p>多线程程序包含可以同时运行的两个或多个部分。这样的程序中的每个部分称为一个线程，每个线程定义了一个单独的执行路径。通俗的说就是，计算机干活时候，将以一个进程为单位，处理一个要执行的程序，比如要打开的QQ，但不能一股脑把它干了，还有别的程序要运行呢。所以进程在内存上是间隔的，运行一个程序，计算机把很大的可执行文件分成若干部分去执行，每一部分以线程(都这么叫)的形式执行，这样就有了多线程处理。</p><p><strong>创建线程</strong>：<br>    #include &lt;pthread.h&gt;<br>    pthread_create (thread, attr, start_routine, arg) ；</p><p><img src="https://img-blog.csdnimg.cn/20200429184556582.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="参数"><br><strong>终止线程</strong></p><p>使用下面的程序，我们可以用它来终止一个 POSIX 线程：</p><p>#include &lt;pthread.h&gt;<br>pthread_exit (status) ；</p><p>在这里，pthread_exit 用于显式地退出一个线程。通常情况下，pthread_exit() 函数是在线程完成工作后无需继续存在时被调用。如果 main() 是在它所创建的线程之前结束，并通过 pthread_exit() 退出，那么其他线程将继续执行。否则，它们将在 main() 结束时自动被终止</p><p><strong>线程连接与分离</strong></p><p><img src="https://img-blog.csdnimg.cn/20200429185150937.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="线程连接分离">)<img src="https://img-blog.csdnimg.cn/20200429185212778.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="lianjie"><br>··············································································································<br><img src="https://img-blog.csdnimg.cn/20200429185308444.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="c11"></p><hr><h5 id="09-web编程"><a href="#09-web编程" class="headerlink" title="09 web编程"></a>09 web编程</h5><p> 除了线程难以外，web编程学起来也很费劲，对初学者一点也不友好。所以在这里就不做过多累赘了。要学的太多了！就简单介绍一下公共网关接口（CGI），公共网关接口（CGI）是一套标准，定义了信息是如何在 Web 服务器和客户端脚本之间进行交换的，是一种用于外部网关程序与信息服务器（如 HTTP 服务器）对接的接口标准。如果要深入学习就寻找相关的书籍资料吧！(进公众号也行，问小码要哦，尽量帮你弄到， 写作不易，客官赏一个！)<br><img src="https://img-blog.csdnimg.cn/2020042919130999.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="拽"></p><hr><p>更多尽在微信公众号小码之光</p><p>博客：<a href="http://www.maliaoblog.cn">www.maliaoblog.cn</a><br> 推荐：<br>    《Essential C++ 中文版》<br>    《C++ Primer Plus 第6版中文版》<br>    《C++ Primer中文版（第5版）》</p><p>··················································END·························································</p><p> 微信公众号    ：小码之光（免费资料等你拿哦，文章公众号首发！二维码7天有效）<br> <a href="https://mp.weixin.qq.com/s/C-IDOjM245by-U_mBzPV2Q" target="_blank" rel="noopener">项目资料</a></p><p> <img src="https://img-blog.csdnimg.cn/20200429190944279.jpg#pic_center" alt="公众号"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;c-高级编程介绍&quot;&gt;&lt;a href=&quot;#c-高级编程介绍&quot; class=&quot;headerlink&quot; title=&quot;c++高级编程介绍&quot;&gt;&lt;/a&gt;c++高级编程介绍&lt;/h4&gt;&lt;p&gt;   学c++确实是件痛苦的事，这水平得一步步抬上去，实话说学校教的也不好，就更痛苦了，
      
    
    </summary>
    
    
    
      <category term="c++" scheme="https://www.maliaoblog.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++对象？看看这个</title>
    <link href="https://www.maliaoblog.cn/2020/0428/"/>
    <id>https://www.maliaoblog.cn/2020/0428/</id>
    <published>2020-04-28T13:39:25.000Z</published>
    <updated>2020-04-27T22:43:14.783Z</updated>
    
    <content type="html"><![CDATA[<h3 id="深入理解c-面向对象几大特性"><a href="#深入理解c-面向对象几大特性" class="headerlink" title="深入理解c++面向对象几大特性"></a>深入理解c++面向对象几大特性</h3><hr><ul><li>类</li><li>继承</li><li>重载</li><li>多态</li><li>数据抽象</li><li>数据封装</li><li>抽象类及实例化</li></ul><hr><p><img src="https://img-blog.csdnimg.cn/20200427194118832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="思维图"></p><hr><h4 id="01-类"><a href="#01-类" class="headerlink" title="01 类"></a>01 类</h4><p>类是 C++ 的核心特性，通常被称为用户定义的类型。也就是说，它和其他基本类型一样(浅显的这么说)，都是type。类定义是以关键字 class 开头，后跟类的名称。由类可以生成对象，这里，对象可以理解为变量，一种特殊类型的变量，相当于c语言中的struct结构体类型变量。</p><hr><h4 id="02-类成员函数"><a href="#02-类成员函数" class="headerlink" title="02 类成员函数"></a>02 类成员函数</h4><p>类的成员函数是指那些把定义和原型写在类定义内部的函数，就像类定义中的其他变量一样。也可以在类的外部使用范围解析运算符 :: 定义该函数</p><p><img src="https://img-blog.csdnimg.cn/20200427195444481.PNG#pic_center" alt="范围解析"></p><p>需要强调一点，在 :: 运算符之前必须使用类名，调用成员函数是在对象上使用点运算符（.）。</p><hr><h4 id="03-类访问修饰符"><a href="#03-类访问修饰符" class="headerlink" title="03 类访问修饰符"></a>03 类访问修饰符</h4><p>访问限制是通过在类主体内部对各个区域标记 public、private、protected 来指定的。关键字 public、private、protected 称为访问修饰符。</p><p>公有成员在程序中类的外部是可访问的(public)，即可以通过(对象.成员)或内部的public调用函数访问。</p><p> 私有成员(private)则不同，那只能通过类内部的调用函数访问或修改，这时的内部public函数相当于链接类内外的桥梁，而不能用(对象.成员)去访问了，即便是继承了的子类(派生类)也不能这样调用私有成员。除了protected。</p><p> 保护成员(protected)像私有成员一样，不能直接访问，需要使用内部函数，但区别就体现在继承的子类上，子类则可以直接通过(对象.成员)调用成员。</p><p><img src="https://img-blog.csdnimg.cn/20200427202735199.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="protected"></p><hr><h4 id="04-析构与构造函数"><a href="#04-析构与构造函数" class="headerlink" title="04 析构与构造函数"></a>04 析构与构造函数</h4><p>类的构造函数是一种特殊的函数，在创建一个新的对象时调用。类的析构函数也是一种特殊的函数，在删除所创建的对象时调用。构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。构造函数可用于为某些成员变量设置初始值。类的析构函数是类的一种特殊的成员函数，它会在每次删除所创建的对象时执行。</p><p>析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀，它不会返回任何值，也不能带有任何参数。析构函数有助于在跳出程序（比如关闭文件、释放内存等）前释放资源。</p><p>下面的实例有助于更好地理解析构函数的概念：</p><p><img src="https://img-blog.csdnimg.cn/20200427203150275.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="构造函数"></p><hr><h5 id="拷贝构造函数："><a href="#拷贝构造函数：" class="headerlink" title="拷贝构造函数："></a>拷贝构造函数：</h5><p>拷贝构造函数，是一种特殊的构造函数，它在创建对象时，是使用同一类中之前创建的对象来初始化新创建的对象。</p><p><img src="https://img-blog.csdnimg.cn/20200427203553626.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="拷贝构造函数"></p><h4 id="05-友元函数"><a href="#05-友元函数" class="headerlink" title="05 友元函数"></a>05 友元函数</h4><p>类的友元函数是定义在类外部，但有权访问类的所有私有（private）成员和保护（protected）成员。尽管友元函数的原型有在类的定义中出现过，但是友元函数并不是成员函数。友元可以是一个函数，该函数被称为友元函数；友元也可以是一个类，该类被称为友元类，在这种情况下，整个类及其所有成员都是友元。如果要声明函数为一个类的友元，需要在类定义中该函数原型前使用关键字 friend。</p><p><img src="https://img-blog.csdnimg.cn/20200427203814283.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="友元函数"><br>注意：友元函数不是类成员函数，但有很厉害的通行证，能访问所以成员，同时也不能被子类继承，要访问不能用(对象.函数)。</p><hr><h4 id="06-内联函数"><a href="#06-内联函数" class="headerlink" title="06 内联函数"></a>06 内联函数</h4><p> 通过内联函数，编译器试图在调用函数的地方扩展函数体中的代码。内联函数是通常与类一起使用。如果一个函数是内联的，那么在编译时，编译器会把该函数的代码副本放置在每个调用该函数的地方。如果想把一个函数定义为内联函数，则需要在函数名前面放置关键字 inline，在调用函数之前需要对函数进行定义。如果已定义的函数多于一行，编译器会忽略 inline 限定符。引入内联函数的目的是为了解决程序中函数调用的效率问题，这么说吧，程序在编译器编译的时候，编译器将程序中出现的内联函数的调用表达式用内联函数的函数体进行替换，而对于其他的函数，都是在运行时候才被替代。这其实就是个空间代价换时间的i节省。所以内联函数一般都是1-5行的小函数。在使用内联函数时要留神：</p><pre><code>1.在内联函数内不允许使用循环语句和开关语句；2.内联函数的定义必须出现在内联函数第一次调用之前；</code></pre><hr><h4 id="07-this指针"><a href="#07-this指针" class="headerlink" title="07 this指针"></a>07 this指针</h4><p>每一个对象都能通过 this 指针来访问自己的地址。this 指针是所有成员函数的隐含参数。因此，在成员函数内部，它可以用来指向调用对象。</p><p>this 指针是所有成员函数的隐含参数，即this已经事先定义好了，不用再声明了。友元函数没有 this 指针，因为友元不是类的成员。只有成员函数才有 this 指针。用法与c中结构体类似，指向对象。</p><hr><h4 id="08-指向类的指针"><a href="#08-指向类的指针" class="headerlink" title="08 指向类的指针"></a>08 指向类的指针</h4><p>指向类的指针方式如同指向结构的指针。实际上，类可以看成是一个带有函数的结构。访问指向类的指针的成员，需要使用成员访问运算符 -&gt;，就像访问指向结构的指针一样。与所有的指针一样，必须在使用指针之前，对指针进行初始化。</p><hr><h4 id="09-静态成员"><a href="#09-静态成员" class="headerlink" title="09 静态成员"></a>09 静态成员</h4><p>使用 static 关键字来把类成员定义为静态的。当我们声明类的成员为静态时，这意味着无论创建多少个类的对象，静态成员都只有一个副本。静态成员在类的所有对象中是共享的。如果不存在其他的初始化语句，在创建第一个对象时，所有的静态数据都会被初始化为零。我们不能把静态成员的初始化放置在类的定义中，但是可以在类的外部通过使用范围解析运算符 :: 来重新声明静态变量从而对它进行初始化。</p><p><img src="https://img-blog.csdnimg.cn/20200427210152476.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="静态成员函数"></p><hr><h4 id="10-继承"><a href="#10-继承" class="headerlink" title="10 继承"></a>10 继承</h4><p>创建一个类时，不需要重新编写新的数据成员和成员函数，只需指定新建的类继承了一个已有的类的成员即可。这个已有的类称为基类，新建的类称为派生类。<br> 如：<br>class 继承类: 访问修饰符 基类；</p><hr><h4 id="11-多继承"><a href="#11-多继承" class="headerlink" title="11 多继承"></a>11 多继承</h4><p>多继承即一个子类可以有多个父类，它继承了多个父类的特性。</p><p>C++ 类可以从多个类继承成员，语法如下：</p><p>class &lt;派生类名&gt;:&lt;继承方式1&gt;&lt;基类名1&gt;,&lt;继承方式2&gt;&lt;基类名2&gt;,…<br>{<br>&lt;派生类类体&gt;<br>};</p><hr><h4 id="12-函数重载"><a href="#12-函数重载" class="headerlink" title="12 函数重载"></a>12 函数重载</h4><p>在同一个作用域内，可以声明几个功能类似的同名函数，但是这些同名函数的形式参数（指参数的个数、类型或者顺序）必须不同。不能仅通过返回类型的不同来重载函数。</p><p><img src="https://img-blog.csdnimg.cn/2020042721070710.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="重载">)<img src="https://img-blog.csdnimg.cn/20200427210731932.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="重载"></p><hr><h4 id="13-运算符重载"><a href="#13-运算符重载" class="headerlink" title="13 运算符重载"></a>13 运算符重载</h4><p>重载的运算符是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。成员运算符重载：</p><p>Box operator+(const Box&amp;);</p><p>声明加法运算符用于把两个 Box 对象相加，返回最终的 Box 对象。大多数的重载运算符可被定义为普通的非成员函数或者被定义为类成员函数。如果我们定义上面的函数为类的非成员函数，那么我们需要为每次操作传递两个参数，那这样子类也不能继承，如下所示：</p><p>Box operator+(const Box&amp;, const Box&amp;);</p><p><img src="https://img-blog.csdnimg.cn/20200427211346583.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="重载函数"></p><h6 id="重载决策："><a href="#重载决策：" class="headerlink" title="重载决策："></a>重载决策：</h6><p>上面的print()函数用了3次，仔细看都是不一样类型的参数，接下来在主函数main里调用了3次，所以内部有一个重载决策机制判断输入的参数类型该定义哪一个函数后调用。</p><hr><h4 id="14-多态"><a href="#14-多态" class="headerlink" title="14 多态"></a>14 多态</h4><p>就是多种形态。当类之间存在层次结构，并且类之间是通过继承关联时，就会用到多态。C++ 多态意味着调用成员函数(即使成员函数名相同)时，会根据调用函数的对象的类型(意味着在基类上产生了不同的派生类)来执行不同的函数。</p><p><img src="https://img-blog.csdnimg.cn/20200427212119939.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="多态"></p><hr><h4 id="15-数据抽象与封装"><a href="#15-数据抽象与封装" class="headerlink" title="15 数据抽象与封装"></a>15 数据抽象与封装</h4><p>数据抽象是指，只向外界提供关键信息，并隐藏其后台的实现细节，即只表现必要的信息而不呈现细节。数据抽象是一种依赖于接口和实现分离的编程（设计）技术。C++ 类为数据抽象提供了可能。它们向外界提供了大量用于操作对象数据的公共方法，也就是说，外界实际上并不清楚类的内部实现。使用类来定义我们自己的抽象数据类型（ADT），可以使用类 iostream 的 cout 对象来输出数据到标准输出，而不需要知道如何实现。说简单点就是要用到接口之类的，从而来方便调用操作数据。</p><p>数据封装是一种把数据和操作数据的函数捆绑在一起的机制，数据抽象是一种仅向用户暴露接口而把具体的实现细节隐藏起来的机制。C++ 通过创建类来支持封装和数据隐藏（public、protected、private）。</p><hr><h4 id="16-抽象类"><a href="#16-抽象类" class="headerlink" title="16 抽象类"></a>16 抽象类</h4><p>C++ 接口是使用抽象类来实现的，如果类中至少有一个函数被声明为纯虚函数，则这个类就是抽象类。纯虚函数是通过在声明中使用 “= 0” 来指定的，如下所示：<br>class Box<br>{<br>   public:<br>      // 纯虚函数<br>      virtual double getVolume() = 0;<br>   private:<br>      double length;      // 长度<br>      double breadth;     // 宽度<br>      double height;      // 高度<br>};</p><p>设计抽象类（通常称为 ABC）的目的，是为了给其他类提供一个可以继承的适当的基类。抽象类不能被用于实例化对象，它只能作为接口使用。如果试图实例化一个抽象类的对象，会导致编译错误。</p><p>因此，如果一个 ABC 的子类需要被实例化，则必须实现每个虚函数，这也意味着 C++ 支持使用 ABC 声明接口。如果没有在派生类中重写纯虚函数，就尝试实例化该类的对象，会导致编译错误。可用于实例化对象的类被称为具体类。</p><p><img src="https://img-blog.csdnimg.cn/20200427212858552.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="抽象类"><br>说白了，这术语本质上就是个接口，以供调用。这些人说的这么高大上，最后把大家都弄晕了。好了以上就是给大家一个柳暗花明，希望有帮助在学习c++的路上！</p><p><img src="https://img-blog.csdnimg.cn/20200427213257990.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="哈哈"><br> 最后附上：<a href="https://blog.csdn.net/Gobullin" target="_blank" rel="noopener">小码csdn</a><br> 微信公众号：小码之光<br> <img src="https://img-blog.csdnimg.cn/20200427213721746.jpg#pic_center" alt="小码之光"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;深入理解c-面向对象几大特性&quot;&gt;&lt;a href=&quot;#深入理解c-面向对象几大特性&quot; class=&quot;headerlink&quot; title=&quot;深入理解c++面向对象几大特性&quot;&gt;&lt;/a&gt;深入理解c++面向对象几大特性&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;类&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
    
      <category term="c++" scheme="https://www.maliaoblog.cn/tags/c/"/>
    
      <category term="面向对象" scheme="https://www.maliaoblog.cn/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>还要翻墙？试试这个</title>
    <link href="https://www.maliaoblog.cn/2020/0427/"/>
    <id>https://www.maliaoblog.cn/2020/0427/</id>
    <published>2020-04-27T00:17:52.000Z</published>
    <updated>2020-04-27T00:23:02.071Z</updated>
    
    <content type="html"><![CDATA[<p>想看看国外的风光吗？疫情期间就像挂在家的咸鱼一样，快发酵了！点开浏览器，可是只能在国内的网站上静静地划过，没有一点新鲜事。可是想上外网又被墙，怎么办？</p><p><img src="https://img-blog.csdnimg.cn/20200426223714317.jpg#pic_center" alt="咋办"></p><p>  哈哈!客官别着急，我这就给您上‘菜’。咱们开了浏览器，最好是火狐的，在设置里的附加组件中的扩展里搜索谷歌上网助手Ghelper(在插件商店里也行)</p><p><img src="https://img-blog.csdnimg.cn/20200426225107588.jpg#pic_center" alt="gao"></p><p><img src="https://img-blog.csdnimg.cn/20200426223824507.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="插件"></p><hr><p>接下来很简单，添加这个插件就行了，添加如下</p><p><img src="https://img-blog.csdnimg.cn/20200426223918722.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="ghelper"><br>on开启上网策略，在这之前需要配置隐私设置。找到该插件，点击管理，允许在隐私窗口运行即可。<br><img src="https://img-blog.csdnimg.cn/20200426224000741.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="ghelper"><br><img src="https://img-blog.csdnimg.cn/20200426224038620.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="开启后台运行"></p><hr><p><img src="https://img-blog.csdnimg.cn/20200426224215506.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="excited"></p><hr><pre><code>客官：太好了！！！！！小码：先别太过于兴奋，咱们先试试看，到底能不能上像youtube这样的外网。客官：那好，快试试！</code></pre><p><img src="https://img-blog.csdnimg.cn/20200426224442361.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="youtube"></p><hr><p>行啦！！（可能需要验证邮件）没问题！不过是走日本的线路，所以才有日语，可以换换别的，就有别的语言选择。</p><pre><code>客官：嗯，不错！开动！小码：莫急，咱再试试！</code></pre><p><img src="https://img-blog.csdnimg.cn/20200426225236528.jpeg#pic_center" alt="tm"></p><p>进入face看看，来到了奥巴马的主页。。。。</p><p><img src="https://img-blog.csdnimg.cn/2020042622455269.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="obama"></p><hr><p>又进入了</p><p><img src="https://img-blog.csdnimg.cn/20200426224651912.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="威尔史密斯"></p><hr><pre><code>​客官：你tm又个P啊！开动！开动！</code></pre><p>小码：好的好的，喜欢的话就关注我哦！哈哈！<br>blog：<a href="https://www.maliaoblog.cn">小码blog</a><br> 微信公众号：小码之光<br> <img src="https://img-blog.csdnimg.cn/20200426225554247.jpg#pic_center" alt="小码之光"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;想看看国外的风光吗？疫情期间就像挂在家的咸鱼一样，快发酵了！点开浏览器，可是只能在国内的网站上静静地划过，没有一点新鲜事。可是想上外网又被墙，怎么办？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020042622371431
      
    
    </summary>
    
    
    
      <category term="ghelper" scheme="https://www.maliaoblog.cn/tags/ghelper/"/>
    
  </entry>
  
  <entry>
    <title>virtualbox虚拟机安装</title>
    <link href="https://www.maliaoblog.cn/2020/0425/"/>
    <id>https://www.maliaoblog.cn/2020/0425/</id>
    <published>2020-04-25T04:43:02.000Z</published>
    <updated>2020-04-25T04:46:56.474Z</updated>
    
    <content type="html"><![CDATA[<h4 id="用虚拟机virtualbox安装ubantu桌面系统"><a href="#用虚拟机virtualbox安装ubantu桌面系统" class="headerlink" title="用虚拟机virtualbox安装ubantu桌面系统"></a>用虚拟机virtualbox安装ubantu桌面系统</h4><ul><li>下载ubantu镜像</li><li>下载安装虚拟机</li><li>新建一个虚拟电脑Linux01</li><li>安装ubantu镜像</li><li>（网络设置）</li></ul><hr><h5 id="01-下载ubantu镜像"><a href="#01-下载ubantu镜像" class="headerlink" title="01 下载ubantu镜像"></a>01 下载ubantu镜像</h5><p>要想在虚拟机里玩ubantu，就要先准备好该系统的iso镜像文件，那么我们就直接到了官网去了</p><p><img src="https://img-blog.csdnimg.cn/20200425111147300.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="官网"><br>可是我们点击下载后速度又慢了，比github还慢，原因就不说了。所以当然有更快的方法啦！不一定非要去国外的官网下载，国内的各大高校和巨头都有镜像站提供免费的镜像下载，这里就给大家推荐一番。</p><h6 id="阿里云开发者社区镜像站"><a href="#阿里云开发者社区镜像站" class="headerlink" title="阿里云开发者社区镜像站"></a><a href="https://developer.aliyun.com/mirror/" target="_blank" rel="noopener">阿里云开发者社区镜像站</a></h6><p><img src="https://img-blog.csdnimg.cn/20200425111743145.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="阿里镜像站"><br>第一个就是ubantu,这里可以下server或desktop都可以，反正又快又免费！哈哈</p><h6 id="浙大镜像站"><a href="#浙大镜像站" class="headerlink" title="浙大镜像站"></a><a href="http://mirrors.zju.edu.cn/" target="_blank" rel="noopener">浙大镜像站</a></h6><p> 为什么选择浙江大学的镜像站呢？国内有很多这样的镜像站啊。。。。当然是快啦，相比较其他大学的站点，算是比较好了。</p><p><img src="https://img-blog.csdnimg.cn/20200425112624418.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="浙大镜像站"></p><p> 我是在阿里云下的，起初弄不清server和desktop版，就先下了server版，结果就是疑惑了半天，也没出现漂亮的界面。<br> <img src="https://img-blog.csdnimg.cn/20200425112906835.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="命令行"></p><hr><h5 id="02-安装oracle-virtualbox虚拟机"><a href="#02-安装oracle-virtualbox虚拟机" class="headerlink" title="02 安装oracle virtualbox虚拟机"></a>02 安装oracle virtualbox虚拟机</h5><p>这个就有点难下了，我没在镜像站里找，在网盘下的。(VMware需要许可证)这里大家可以搜一搜，分享<a href="https://pan.baidu.com/s/13mubMuemzTbLApTyxJXQVQ" target="_blank" rel="noopener">VM</a></p><p>提取码：vz1h</p><p>下载好安装包后，打开就行了</p><p><img src="https://img-blog.csdnimg.cn/20200425115703159.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="安装完成"></p><hr><h5 id="03-新建虚拟电脑Linux01"><a href="#03-新建虚拟电脑Linux01" class="headerlink" title="03 新建虚拟电脑Linux01"></a>03 新建虚拟电脑Linux01</h5><p>点击新建，选择要安装的系统，之后就是一路默认。</p><p><img src="https://img-blog.csdnimg.cn/20200425120535645.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="新建"><br> 内存最好配置在2G以上</p><p><img src="https://img-blog.csdnimg.cn/20200425120650265.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="内存"></p><hr><h5 id="04-安装ubantu镜像"><a href="#04-安装ubantu镜像" class="headerlink" title="04 安装ubantu镜像"></a>04 安装ubantu镜像</h5><p>虽然已经有一个虚拟电脑了(其实就是占用宿主机的磁盘空间)，这个时候只有硬件上的支持，还没有系统文件的调用。所以咋们进入启动Vbox界面的设置项</p><p><img src="https://img-blog.csdnimg.cn/20200425121253258.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="设置"></p><p>红色箭头那点击进入，再点击注册项，即可从宿主机文件里选择下载好的ubantu镜像文件</p><p><img src="https://img-blog.csdnimg.cn/20200425121517698.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="注册"><br>ok,配置好后，再启动虚拟电脑，就进入ubantu系统安装界面了，而不是命令行。</p><p><img src="https://img-blog.csdnimg.cn/2020042512174573.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="ubantu界面"></p><pre><code> 接下来就是安装了 </code></pre><p><img src="https://img-blog.csdnimg.cn/20200425122022310.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br> 这里可以选择试用或者安装ubantu，安装后启动就直接进入虚拟电脑工作界面了。</p><p><img src="https://img-blog.csdnimg.cn/20200425122834737.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="ubantu"><br> 界面还是很漂亮的，不过virtualbox是小型机，界面不能全屏，如果可能还是选VMware虚拟机吧，试过，感觉就是香！哈哈！</p><hr><h5 id="05-网络设置"><a href="#05-网络设置" class="headerlink" title="05 网络设置"></a>05 网络设置</h5><p> 这里就不过多讲了，建好后可以配置网络，有自己的cdn节点。推荐<a href="https://www.bilibili.com/video/BV1bA411b7vs" target="_blank" rel="noopener">程序羊</a></p><hr><p>附：<a href="https://blog.csdn.net/Gobullin" target="_blank" rel="noopener">小码csdn</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;用虚拟机virtualbox安装ubantu桌面系统&quot;&gt;&lt;a href=&quot;#用虚拟机virtualbox安装ubantu桌面系统&quot; class=&quot;headerlink&quot; title=&quot;用虚拟机virtualbox安装ubantu桌面系统&quot;&gt;&lt;/a&gt;用虚拟机virt
      
    
    </summary>
    
    
    
      <category term="ubantu" scheme="https://www.maliaoblog.cn/tags/ubantu/"/>
    
      <category term="virtualbox虚拟机" scheme="https://www.maliaoblog.cn/tags/virtualbox%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>gitpage CDN加速配置与深入</title>
    <link href="https://www.maliaoblog.cn/2020/0421/"/>
    <id>https://www.maliaoblog.cn/2020/0421/</id>
    <published>2020-04-21T04:09:58.000Z</published>
    <updated>2020-04-21T04:19:39.960Z</updated>
    
    <content type="html"><![CDATA[<h3 id="github-page-cdn加速服务深入了解"><a href="#github-page-cdn加速服务深入了解" class="headerlink" title="github page cdn加速服务深入了解"></a>github page cdn加速服务深入了解</h3><ul><li>CDN介绍</li><li>CDN提供商</li><li>github page cdn加速服务配置</li><li>CDN加速服务深入</li></ul><h4 id="CDN介绍"><a href="#CDN介绍" class="headerlink" title="CDN介绍"></a>CDN介绍</h4><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术…..</p><p>上面是百度的介绍，啰嗦了一大堆，说白了就是让坐在电脑前的用户就近的获取需要的网络资源，而不用跑去访问遥远的服务器了。既然这么好，那就用呗！国内外都有一些这样的CDN服务提供商，但是大家都知道，访问外面的网络很费劲的。国内的一些CDN提供商也有不少，服务也不错，就给大家推荐一下。</p><h4 id="CDN提供商"><a href="#CDN提供商" class="headerlink" title="CDN提供商"></a>CDN提供商</h4><h6 id="阿里云CDN-DCDN全站加速"><a href="#阿里云CDN-DCDN全站加速" class="headerlink" title="阿里云CDN/DCDN全站加速"></a>阿里云CDN/DCDN全站加速</h6><p><img src="https://img-blog.csdnimg.cn/20200421103618200.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="阿里云CDN">阿里云的CDN加速服务应该算是不错了，支持国内外和全球加速，这里选择全站加速会比较好一点。</p><h5 id="腾讯云CDN"><a href="#腾讯云CDN" class="headerlink" title="腾讯云CDN"></a>腾讯云CDN</h5><p>巨头们总是这么滴强。。。腾讯云内同样提供比较哟西的CDN加速服务，提供商不一样，可能CDN操作的流程会略有不同。<br><img src="https://img-blog.csdnimg.cn/20200421104213353.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="腾讯CDN"></p><h5 id="又拍云CDN"><a href="#又拍云CDN" class="headerlink" title="又拍云CDN"></a>又拍云CDN</h5><p>又拍云服务提供商也还行吧，反正试了下没啥效果，这里最好在域名提供商哪里选择CDN服务。<br><img src="https://img-blog.csdnimg.cn/20200421104446548.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="又拍云CDN"></p><h4 id="Github-page-cdn配置"><a href="#Github-page-cdn配置" class="headerlink" title="Github page cdn配置"></a>Github page cdn配置</h4><p>在没有CDN的时候是这样的<br><img src="https://img-blog.csdnimg.cn/20200421104655773.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="无CDN测速">火红的大火鸡，非常差的访问去访问github节点。之后我选择阿里云的CDN去加速访问，在这之前可能要准备一个域名来操作啦。</p><p>现在我们进入阿里云的CDN，在域名管理处添加要加速的域名，如’<a href="http://www.maliaoblog.cn&#39;,这时候会提示没有备案，不用管，继续操作。在源站信息配置上，有三种选择，分别是OSS，域名，IP，如果你还填要加速的域名的话，显然会有重定向的麻烦，所以这里的源站在阿里云帮助文档里就讲了，源站就是github" target="_blank" rel="noopener">www.maliaoblog.cn&#39;,这时候会提示没有备案，不用管，继续操作。在源站信息配置上，有三种选择，分别是OSS，域名，IP，如果你还填要加速的域名的话，显然会有重定向的麻烦，所以这里的源站在阿里云帮助文档里就讲了，源站就是github</a> page服务器的域名或IP地址，这里还没有涉及到回源host的设置，大家尽管放心操作。之后在端口处选择443端口（以https协议访问，需要添加Https证书，如SSL的），加速区域选不包含中国大陆的，即海外节点加速，最后点击下一步。</p><p><img src="https://img-blog.csdnimg.cn/20200421110442442.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="CDN配置"><br>到这里基本上就完成了，返回的时候刷新一下，能看到CNAME地址！需要在域名解析到这个CNAME地址。</p><p><img src="https://img-blog.csdnimg.cn/20200421111013463.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="CDN运行正常">只有解析到这个CNAME地址后，过几分钟，阿里云才能进行CDN加速服务。之后以这个加速域名去测速，速度就会提升了。注意，是以这个加速了的域名访问，那访问的就是阿里云帮我们提供的CDN节点，那当然会更快啦。</p><h4 id="CDN加速服务深入"><a href="#CDN加速服务深入" class="headerlink" title="CDN加速服务深入"></a>CDN加速服务深入</h4><p>其实也没有多大的深入，就是在弄明白一个问题：github page还需要自定义域名吗？我们加没加速对博客站点的访问？</p><h5 id="ping了一下，没加速对github-io的访问"><a href="#ping了一下，没加速对github-io的访问" class="headerlink" title="ping了一下，没加速对github.io的访问"></a>ping了一下，没加速对github.io的访问</h5><p><img src="https://img-blog.csdnimg.cn/20200421112042708.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="io还是原样"><br>github.io为美国的节点，直接访问当然没多快呀，如果ping加速域名的话，会访问阿里美国的CDN的节点，如果要回源的话，访问的请求会从节点发送出去。这就等于加速了从电脑前的客户所在地到节点该段的速度，走的是访问CDN节点的路线。</p><p><img src="https://img-blog.csdnimg.cn/2020042111291429.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="流程图">接着我再以加速域名测速，肯定是红色少了</p><p><img src="https://img-blog.csdnimg.cn/20200421113044946.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="鸡儿绿了"><br>访问请求最终还是要得到最后的服务器的回应，也就是给我们网页资源。为此我又进行了测试。</p><h6 id="路由测试"><a href="#路由测试" class="headerlink" title="路由测试"></a>路由测试</h6><p><img src="https://img-blog.csdnimg.cn/20200421115105784.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="路由测试"></p><h6 id="DNS测试"><a href="#DNS测试" class="headerlink" title="DNS测试"></a>DNS测试</h6><p><img src="https://img-blog.csdnimg.cn/202004211152004.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="DNS测试">)如果加速域名DNS解析到github.io的话，github.io又有节点，那整个访问就快了。真的是这样的吗？还要不要.io自定义域名呢？page通过产生的github.io就可以访问到博客，自定义域名只是放到另一个展示(published)的地方(site)，那既然我们需要买域名去覆盖，那就要解析一个到github.io的CNAME的记录了。这么多，浏览器可能产生重定向的问题，以至于要不断刷新页面。但可以用一下，至少不要跑老远去DNS解析，输入域名，浏览器就老老实实交出页面啦。<br><a href="https://blog.csdn.net/Gobullin" target="_blank" rel="noopener">小码CSDN博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;github-page-cdn加速服务深入了解&quot;&gt;&lt;a href=&quot;#github-page-cdn加速服务深入了解&quot; class=&quot;headerlink&quot; title=&quot;github page cdn加速服务深入了解&quot;&gt;&lt;/a&gt;github page cdn加速
      
    
    </summary>
    
    
    
      <category term="github page" scheme="https://www.maliaoblog.cn/tags/github-page/"/>
    
  </entry>
  
  <entry>
    <title>连接远程服务器出现乱码</title>
    <link href="https://www.maliaoblog.cn/2020/0419/"/>
    <id>https://www.maliaoblog.cn/2020/0419/</id>
    <published>2020-04-19T14:27:06.000Z</published>
    <updated>2020-04-19T14:53:43.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="连接远程服务器后出现命令行乱码"><a href="#连接远程服务器后出现命令行乱码" class="headerlink" title="连接远程服务器后出现命令行乱码"></a>连接远程服务器后出现命令行乱码</h2><p>真是巧了，最近遇到的事儿净跟编码有关，好像中了毒一样。话不多说，看乱码。<br><img src="https://img-blog.csdnimg.cn/20200419212122295.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="linux命令行乱码">大家已经看到了，连上服务器后的写个文件的目录命令，就只拉出了四个字，呃，不对，还有一个零蛋。好，这种乱码现象其实已经多见少怪了，然而还是有原因的，不然我怎么会写个博客记录一下。值得注意的就是在命令行出现乱码的情况很少，还是敲了命令之后，何况有的小伙伴还不熟悉linux系统的操作，更不知道怎么办了。慌了手脚，求救网页标签都打开了好几个，还是不知道咋弄，于是小伙伴只好四下求救大佬。<br>今天我就带大家一块干了。。</p><h3 id="so-到了面对编码的时候了"><a href="#so-到了面对编码的时候了" class="headerlink" title="so 到了面对编码的时候了"></a>so 到了面对编码的时候了</h3><p> 大家还记得上次讲过的编码格式问题吧，这次就不是转成Ansy格式了，要在secureCRT把编码格式转成utf-8格式，为什么呢？因为默认的secureCRT命令行不是utf-8,也不是中文字符集，所以就要改一改。如果小伙伴用的是中文破解版的，点击菜单栏中选择里会话选项，英文为option,界面如下，在外观(appearance)那里的字符编码选择那选择utf-8<br> <img src="https://img-blog.csdnimg.cn/20200419214524425.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="option会话选项"><br> 字体选择自己喜欢的，但是要中文字符集gb2312</p><p><img src="https://img-blog.csdnimg.cn/20200419214829854.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="字体">OK啦，解决问题啦，就有如下对比</p><p><img src="https://img-blog.csdnimg.cn/20200419214956728.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="命令输入"><br>这样就顺顺利利地干了它了，哈哈，心里是不是很爽啊。如果大家对界面背景不满意同样可以调节，比如背景为黑色，命令前景为白色或黑客绿(瞎装逼色)，看图</p><p><img src="https://img-blog.csdnimg.cn/20200419215401157.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="黑客绿"> <code>如果小伙伴还弄不明白，那只能献上本人亲自为大家制作的动图了（不信你看不懂）</code></p><p><img src="https://img-blog.csdnimg.cn/20200419221542948.gif#pic_center" alt="亲力亲为动图"><br>好啦，以上就是小码码的学习心得，希望对大家有帮助，喜欢的话就点赞，留言哦，哈哈。<br>附<a href="https://blog.csdn.net/Gobullin" target="_blank" rel="noopener">小码码官方博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;连接远程服务器后出现命令行乱码&quot;&gt;&lt;a href=&quot;#连接远程服务器后出现命令行乱码&quot; class=&quot;headerlink&quot; title=&quot;连接远程服务器后出现命令行乱码&quot;&gt;&lt;/a&gt;连接远程服务器后出现命令行乱码&lt;/h2&gt;&lt;p&gt;真是巧了，最近遇到的事儿净跟编码有关
      
    
    </summary>
    
    
    
      <category term="问题" scheme="https://www.maliaoblog.cn/tags/%E9%97%AE%E9%A2%98/"/>
    
      <category term="linux" scheme="https://www.maliaoblog.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>matery主题优化问题</title>
    <link href="https://www.maliaoblog.cn/2020/0409/"/>
    <id>https://www.maliaoblog.cn/2020/0409/</id>
    <published>2020-04-09T12:32:23.000Z</published>
    <updated>2020-04-10T02:01:22.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="matery主题优化时解析出bug"><a href="#matery主题优化时解析出bug" class="headerlink" title="matery主题优化时解析出bug"></a>matery主题优化时解析出bug</h1><ul><li><p>matery是个好的主题这个我就不详细地说了，但是优化也难</p></li><li><p>越好的主题、越丰富的主题，插件越多，配置越多，就容易出错</p></li><li><p>最要命的是这种静态网页的部署还要用最原始的方法进行，先在命令行生成静态文件，然后发送给要命的github</p></li><li><p>总之bug数不胜数，大部分出错的原因基本都一致，无非就是在yml文件里乱弄出的bug</p></li><li><p>但是我优化主题时碰上了难得的bug，就分享给大家，省的大家走弯路</p><h2 id="page-ForEach-is-not-a-function后接一大片路径"><a href="#page-ForEach-is-not-a-function后接一大片路径" class="headerlink" title="page.*.ForEach is not a function后接一大片路径"></a>page.*.ForEach is not a function后接一大片路径</h2></li></ul><p><img src="https://img-blog.csdnimg.cn/20200409184120112.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="page bug"><br>这里的*就是图中的categorioes,我叫他page bug。就光看那么多行根本摸不着头脑，想着是肯定是配置出了问题，于是就打开配置文件查看。其实这个问题很少见，一般都不是config配置文件的问题。弄了半天，谁也没想到是页面文件categorioes里的index.md文件有问题。我的配置如下：<br><img src="https://img-blog.csdnimg.cn/2020040918524995.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="index.md配置"><br>一般都很少进入里面配置什么的，但是为了优化主题，让它更好看，就进入里面瞎搞乱改，网上也没什么指导如何优化配置的好文章，所以自然会遇到稀奇bug。上面的配置就出错了，出在categorioes的属性的配置，用这个主题，categories文件(需要事先new一个才有)好像不准添加属性，换成小写c也不行，之后做了如下更改。</p><p><img src="https://img-blog.csdnimg.cn/20200409190637167.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="删除属性后"><br>去掉那个C后，那个bug就没了，一切顺畅生成页面。四不四很无语，就这个鬼东西弄了一整天，不是说，就是这个静态页面配置太苛刻了，用md和yml去写，缩进不对都是要出错的。这给广大怀着博客梦的IT客破了一大盆冷水，太难了！<img src="https://img-blog.csdnimg.cn/20200409202700413.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="🆗"></p><p>我还试了在其他页面文件中的md文件里设置categories属性，结果都🆗。。。</p><p><img src="https://img-blog.csdnimg.cn/20200409191736240.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="tags文件里md文件配置了没问题"><br>tags文件里md文件配置了没问题,我是说categorioes属性，图片里没有，配置tags属性也没事(没打双引号都没事)。</p><pre><code>那到底是什么样的优化造成的魔王级的bug呢？</code></pre><p>hexo主题本来就不会自带页面的配置优化，需要自己弄，就matery来说吧，除了归档页面，其他的页面都不会出现和用这个主题的人一样相似布局，所以接下来就告诉大家怎么弄。</p><pre><code>就是在index.md文件里配置，只需添加如下几行：在categories里：type: &#39;categories&#39;                layout: &#39;categories&#39;        (注意：后空格)其他类推</code></pre><p>这样在各个页面就有自己配置了，如下</p><p><img src="https://img-blog.csdnimg.cn/20200409195433492.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="配置了friendst页面"><br>这是弄好了友链页面后的效果，能看到基本上是有个排版了。但框框内却出现了乱码，很巧的是出现乱码的地方都是汉字该出现的地方。所以大家应该知道了，又是编码的问题。这次我们还用notepad++更改编码友链的josn格式,如果没有notepad++或不知道如何更改编码格式，请参考<a href="https://blog.csdn.net/Gobullin/article/details/105349236" target="_blank" rel="noopener">批处理文件编码出错</a>原来友链的josn的编码格式为Ansi,我们需要utf-8格式。欧克，行了，如下：<img src="https://img-blog.csdnimg.cn/20200409200717571.JPG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="乱码解决"></p><h3 id="谈谈hexo"><a href="#谈谈hexo" class="headerlink" title="谈谈hexo"></a>谈谈hexo</h3><p>hexo这样的博客虽然用了很流行的框架，但部署起来还是很费劲，就是用上去很费劲，powerful的博客框架还是太少了，什么都追求免费服务，哪有这么样的好事，这就导致了开发出优质的框架的人太少了。现在大牛的程序员都快是古董，做个IT技术更倾向于商业化，应用型。以上就是分享，另附<a href="https://www.maliaoblog.cn">个人博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;matery主题优化时解析出bug&quot;&gt;&lt;a href=&quot;#matery主题优化时解析出bug&quot; class=&quot;headerlink&quot; title=&quot;matery主题优化时解析出bug&quot;&gt;&lt;/a&gt;matery主题优化时解析出bug&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;m
      
    
    </summary>
    
    
    
      <category term="优化" scheme="https://www.maliaoblog.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="bug问题" scheme="https://www.maliaoblog.cn/tags/bug%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>解决执行批处理文件后出现的问题</title>
    <link href="https://www.maliaoblog.cn/2020/0406/"/>
    <id>https://www.maliaoblog.cn/2020/0406/</id>
    <published>2020-04-06T10:35:45.000Z</published>
    <updated>2020-04-09T02:09:09.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="执行批处理文件后出现的乱码问题"><a href="#执行批处理文件后出现的乱码问题" class="headerlink" title="执行批处理文件后出现的乱码问题"></a>执行批处理文件后出现的乱码问题</h1><p>用windows批处理总是很放便的，特便是在抢时间的情况下用批处理开启程序，运行大量命令等等。但对于刚接触的新手来说，可能是一件费劲的事！有时候还会遇到问题，比如今天要讲的执行批处理文件后出现的乱码问题。如下图：<br><img src="https://img-blog.csdnimg.cn/20200406190912897.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="批处理文件"><br>文件里的命令的意思就是在命令行输出“垃圾快跑”四个字，然后运行后如下</p><p><img src="https://img-blog.csdnimg.cn/20200406191232149.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="运行结果"><br>运行后出现的“致富喽”几个字。。。其实我也不知道是什么字。接着面对乱码的问题，大家想一想就明白估计是文件的编码格式出了问题，强调一下啊，是编码格式。在这里就要讲一个东西，就是windows的cmd命令行本身用的是Ansi编码，但用记事本打开或者说文件本身的编码其实不是Ansi编码，有可能是Utf-8。那这里就有两种解决方法。</p><h4 id="一、使用notepad-转换编码格式"><a href="#一、使用notepad-转换编码格式" class="headerlink" title="一、使用notepad++转换编码格式"></a>一、使用notepad++转换编码格式</h4><p> 既然要用到notepad++，相信大家应该不会陌生，notepad++功能强大，可以说比sublime text好用，这里之所以不推荐sublime text，是因为它没有编码格式的转换功能，甚至没有Ansi格式的编码，最后建议选择notepad++。考虑到有人没用过，下面就送上notepad++的网盘下载地址：<a href="https://pan.baidu.com/s/1Rz4RTcvTAktiXpQHY90kqQ" target="_blank" rel="noopener">notepad++下载</a>    提取码：xnl1</p><p> <img src="https://img-blog.csdnimg.cn/20200406193206198.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="notepad++"><br> notepad++支持多种语法高亮和编码及文件兼容，是程序哥的必备良器。打开notepad++后，默认为utf-8格式，点击文件，选择打开，选择你要打开的批处理文件，看到菜单栏的编码选项(已经很醒目了)，之后点击编码，选择转换为Ansi格式，再在文件选项中点击保存。</p><p> <img src="https://img-blog.csdnimg.cn/20200406194032449.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="Notepad++"><br> 在命令行后执行或直接点开批处理文件，解决乱码了</p><p> <img src="https://img-blog.csdnimg.cn/20200406194216646.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="二、另存为"><a href="#二、另存为" class="headerlink" title="二、另存为"></a>二、另存为</h4><p> 用记事本打开bat文件后，选择另存为，之后点击选择Ansi格式编码，同样能解决问题。<br> <img src="https://img-blog.csdnimg.cn/20200406202619497.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvYnVsbGlu,size_16,color_FFFFFF,t_70#pic_center" alt="另存为">打开运行批处理文件后，就没出现过乱码啦。</p><p>以上就是解决类似问题的几个方法，可以的话就留言评论，希望大家多多留言哦。<br>另附：<a href="https://blog.csdn.net/Gobullin" target="_blank" rel="noopener">个人博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;执行批处理文件后出现的乱码问题&quot;&gt;&lt;a href=&quot;#执行批处理文件后出现的乱码问题&quot; class=&quot;headerlink&quot; title=&quot;执行批处理文件后出现的乱码问题&quot;&gt;&lt;/a&gt;执行批处理文件后出现的乱码问题&lt;/h1&gt;&lt;p&gt;用windows批处理总是很放便的，
      
    
    </summary>
    
    
      <category term="windows" scheme="https://www.maliaoblog.cn/categories/windows/"/>
    
    
      <category term="问题" scheme="https://www.maliaoblog.cn/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>用C语言实现链表</title>
    <link href="https://www.maliaoblog.cn/2020/0405/"/>
    <id>https://www.maliaoblog.cn/2020/0405/</id>
    <published>2020-04-05T01:40:19.000Z</published>
    <updated>2020-04-09T02:23:28.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用C语言实现链表，附代码注释"><a href="#用C语言实现链表，附代码注释" class="headerlink" title="用C语言实现链表，附代码注释"></a>用C语言实现链表，附代码注释</h1><p>这里给已经在学C和数据结构的小伙伴提供一些弹药支持，虽然不知道管不管用，在这里大佬就勿扰了吧！哈哈！</p><p>在实现一个简单的链表前需要用到哪些知识点呢？</p><ul><li>C语言基础知识，比如要用到的结构体、指针、函数、运算</li><li>一点数据结构的知识，在学习数据结构也能看到链表的身影，我们这里实现的是单项链表</li><li>有手，有脑</li></ul><p>现在上代码：</p><pre><code># include&lt;stdio.h&gt;# include&lt;malloc.h&gt;//创造链表 //定义一个节点类型typedef struct node{    int data;    char name[10];    struct node *next;}noDe,* pnoDe; // 输入函数 pnoDe funkin(void){     pnoDe pHead = (pnoDe)malloc(sizeof(noDe));    //定义头指针和尾指针分别指向头和尾节点      pnoDe ptail = pHead;    ptail-&gt;next = NULL;    int n,score;    //有效节点的数量      char name[10];        printf(&quot;please funkin a number:&quot;);    scanf(&quot;%d&quot;,&amp;n);             // 连续输入学生及成绩数据     for(int i=0;i&lt;n;i++){        pnoDe pNew = (pnoDe)malloc(sizeof(noDe));        printf(&quot;please scanf the score of number %d :&quot;,i+1);        scanf(&quot;%d %s&quot;,&amp;(pNew-&gt;data),pNew-&gt;name);        /*核心代码*/        ptail-&gt;next = pNew;       //让尾节点指针指向新节点         ptail = pNew;    //让尾指针指向新节点 ,并移动到下一个节点         ptail-&gt;next = NULL;    //让新节点指针域为空     }        return pHead;} // 输出函数 void out(pnoDe pHead){    int k = 1;    pnoDe p = pHead-&gt;next;    while(p != NULL){        printf(&quot;\nfunkout number %d: &quot;,k);        printf(&quot;score= %d\nname= %s\n&quot;,p-&gt;data,p-&gt;name);        p = p-&gt;next;        k++;    }    return;}int main(void){    pnoDe pHead = NULL;    pHead = funkin();    out(pHead);    return 0;    } </code></pre><p>代码并不难懂，大概就是先输入需要创建的节点数或有效数据个数，之后创建了一个会构造链表的函数，并返回头指针。这个时候链表其实已经创建好了，并且已经放入了数据。之后，输出函数out()会输出数据。ok，就是这么简单！觉得可以就点赞加关注，博主会定期更新哦！哈！最后附上个人博客链接：<a href="https://blog.csdn.net/Gobullin" target="_blank" rel="noopener">csdn博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用C语言实现链表，附代码注释&quot;&gt;&lt;a href=&quot;#用C语言实现链表，附代码注释&quot; class=&quot;headerlink&quot; title=&quot;用C语言实现链表，附代码注释&quot;&gt;&lt;/a&gt;用C语言实现链表，附代码注释&lt;/h1&gt;&lt;p&gt;这里给已经在学C和数据结构的小伙伴提供一些弹
      
    
    </summary>
    
    
      <category term="编程" scheme="https://www.maliaoblog.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C语言" scheme="https://www.maliaoblog.cn/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="原创" scheme="https://www.maliaoblog.cn/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>致访客</title>
    <link href="https://www.maliaoblog.cn/2020/0327/"/>
    <id>https://www.maliaoblog.cn/2020/0327/</id>
    <published>2020-03-27T04:01:39.000Z</published>
    <updated>2020-04-09T02:09:24.494Z</updated>
    
    <content type="html"><![CDATA[<p>这是经过多天努力的结果，这个站点就界面来说，不怎么酷炫。但是是我一直想做的东西–建一个与众不同的个人网站，每天可以像发微博一样自由地推送我写好的博客文章。对于<a href="http://www.maliaoblog.cn，我很珍惜能拥有它，还是经过自己的不断尝试，一点一点地做出来的，就如心血的结晶。" target="_blank" rel="noopener">www.maliaoblog.cn，我很珍惜能拥有它，还是经过自己的不断尝试，一点一点地做出来的，就如心血的结晶。</a></p><h1 id="来访"><a href="#来访" class="headerlink" title="来访"></a>来访</h1><pre><code>I&#39;m so proud for your visit!我想说，感谢你能来见证我博客的诞生，正因为有你的加入，才能有我的博客的成长。以后大家可以通过我的博客官网看到我最新的动态，我会在这个站点和你面对面。</code></pre><h1 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h1><p>博客会不定期更新，我会不断的努力写出好的文章作品。</p><h1 id="为什么叫码力奥"><a href="#为什么叫码力奥" class="headerlink" title="为什么叫码力奥"></a>为什么叫码力奥</h1><pre><code>可能因为马里奥比较出名吧！作为产码达人，一定要起一个好名字。</code></pre><h1 id="以后站点会变换吗？"><a href="#以后站点会变换吗？" class="headerlink" title="以后站点会变换吗？"></a>以后站点会变换吗？</h1><pre><code>可能吧！但现在算是比较稳定了，起初，我想在站点加入更多功能插件，可是条件限制各方面因素，就只能到这！另外博客的站点是建在外网的，所以访问比较慢！这里就体谅一下吧！一个人建站比较幸苦的。</code></pre><h1 id="加油！"><a href="#加油！" class="headerlink" title="加油！"></a>加油！</h1><pre><code>毕竟建站不是我最终的想法，想着继续努力地学习成长，以后拥有更加幸福的生活。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是经过多天努力的结果，这个站点就界面来说，不怎么酷炫。但是是我一直想做的东西–建一个与众不同的个人网站，每天可以像发微博一样自由地推送我写好的博客文章。对于&lt;a href=&quot;http://www.maliaoblog.cn，我很珍惜能拥有它，还是经过自己的不断尝试，一点一
      
    
    </summary>
    
    
      <category term="程序人生" scheme="https://www.maliaoblog.cn/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="博客简介" scheme="https://www.maliaoblog.cn/tags/%E5%8D%9A%E5%AE%A2%E7%AE%80%E4%BB%8B/"/>
    
  </entry>
  
</feed>
